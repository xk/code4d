  //@use:  // MACRO_CALL_BACK ($MethodEvent_t:txt ;$MethodName_t:txt ; $UserOS_t:txt)If (False)  //=================  //@FUNCTION: MACRO_CALL_BACK  //@brief: This method is executed by the macro.xml  //@attributes: shared  //=================  //@params:  // $1 (_t): $MethodEvent_t   // $2 (_t): $MethodName_t  // $3 (_t): $UserOS_t  //=================  //@author: jpupier  //@modified_by:  //---------  //@version: 1.0  //@date: 11 jun, 2010  //=================  //@note: This method must be shared between host & component  //@note: Do not rename this method unless you modify the macro.xml  //@SVN_Folder: MH_/  //=================  //@SVN_Folder: MH_/Else   //=================C_TEXT($1;$MethodEvent_t)C_TEXT($2;$MethodName_t)C_TEXT($3;$UserOS_t)  //---------C_LONGINT($ParamCount_l)$ParamCount_l:=Count parametersC_BOOLEAN($Continue_b)  //=================End if   //=================If ($ParamCount_l>=3)$MethodEvent_t:=$1$MethodName_t:=$2$UserOS_t:=$3End if $Continue_b:=True$Continue_b:=$Continue_b & Asserted($MethodEvent_t#"";"Method event not defined")$Continue_b:=$Continue_b & Asserted($MethodName_t#"";"Method name is empty")$Continue_b:=$Continue_b & Asserted($UserOS_t#"";"User OS is empty")If ($Continue_b)  // This is the MethodHistory event handlerMH_MethodEvent ($MethodEvent_t;$MethodName_t;$UserOS_t)End if   //=================  //eom