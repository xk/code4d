If (False)  // MATH_Fractales [Antoine Galmiche 10/09/2003]  // ------------------------------------------------------  // ---------------   F R A N C A I S  ---------------   // ------------------------------------------------------  // Permet le tracé de fractales de type Mandelbrot ou Julia  // ---------------------------------------------  // MATH_Fractales (valeur X; valeur Y; Maximum {;Partie réelle; Partie imaginaire}  // -> Résultat : convergence ou vitesse de divergence  // valeur X (Numérique) valeur abscisse (entre -2 et +2 en principe)  // valeur Y (Numérique) valeur ordonnée (entre -2 et +2 en principe)  // maximum (Numérique) nombre maximum d'itérations, synonyme de finesse  // partie réelle (Numérique) valeur réelle du nombre imaginaire repère (Julia)  // partie imaginaire (Numérique) valeur imaginaire du nb imaginaire repère (Julia)  // Résultat (Numérique) nul s'il y a convergence (noir), sinon divergence  // ---------------------------------------------  // MATHERROR  // 0 -> Pas d'erreur  // ---------------------------------------------  // Si les quatrième et cinquième paramètres ne sont pas passés,  // c'est un ensemble de Mandelbrot qui sera généré avec toutes les réponses  // sinon c'est une courbe de Julia.  // Voir application dans la base exemple  // ------------------------------------------------------  // ---------------   E N G L I S H   -----------------  // ------------------------------------------------------  // Allow tracing Mandelbrot or Julia fractals  // ---------------------------------------------  // MATH_Fractales (X value; Y value; Maximum {;Real part; Imaginary part}  // -> Result : convergence divergence speed  // X value (Real) abscissa (usually between -2 et +2)  // Y value (Real) ordinate(usually between -2 et +2)  // maximum (Real) iteration maximum number, synonymous of thinness  // Real part (Real) real part of imaginary number (Julia)  // Imaginary part (Real) imaginary part of imaginary number (Julia)  // Result (Real) zero if there is convergence (black), else divergence  // ---------------------------------------------  // MATHERROR  // 0 -> No error  // ---------------------------------------------  // If 4th and 5th parameters re not passed,  // It is a Mandelbrot set that will be generated with all answers  // else, it is a Julia curve.  // See application in example database  // ------------------------------------------------------  //  (translation : BE 03-2010)End if   //@SVN_Folder: MATH_/C_LONGINT(MATHERROR)C_REAL(${1})C_REAL($0)C_REAL($norme;$a;$b;$c;$d;$e;$n)MATHERROR:=0$norme:=0$n:=0$a:=$1$b:=$2If (Count parameters=3)  // MANDELBROT$c:=0$d:=0Repeat $e:=($c*$c)-($d*$d)+$a$d:=(2*$c*$d)+$b$c:=$e$n:=$n+1$norme:=($c*$c)+($d*$d)Until (($n>=$3) | ($norme>=4))Else   // JULIARepeat $c:=($a*$a)-($b*$b)+$4$b:=(2*$a*$b)+$5$a:=$c$n:=$n+1$norme:=($c*$c)+($d*$d)Until (($n>=$3) | ($norme>=4))End if If ($n>=$3)  // convergence$0:=0Else $0:=$nEnd if 