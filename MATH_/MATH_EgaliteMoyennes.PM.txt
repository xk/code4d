If (False)  // MATH_EgaliteMoyennes [Teddy LINET 12/2002]  // ------------------------------------------------------  // ---------------   F R A N C A I S  ---------------  // ------------------------------------------------------  // ATTENTION : Nécessite MATH_LoiNormale  // ---------------------------------------------  // Dans sa 1ère écriture :  // Permet de comparer une moyenne expérimentale à une valeur donnée  // Dans sa 2e écriture  // Permet de comparer deux moyennes expérimentales  //   // Renvoie p, le risque que ses 2 valeurs soient différentes  // Si p est supérieur au seuil de signification (habituellement 5%) on peut  // considerer que les moyennes sont différentes (rejet de l'hypothèse Ho).  // Sinon, on ne peut rien conclure…  //   // ATTENTION : ceci ne correspond pas à la conduite habituelle  // en statistiques (d'abord test, puis calcul de p si z est dans l'intervalle  // de confiance). Mais le résultat est en fait équivalent  // ---------------------------------------------  // Rappels mathématiques :  // Le test d'égalité d'une moyenne expérimentale à une valeur donnée  // Ce test permet de vérifier si la moyenne expérimentale x coincide avec une  // valeur donnée muh (réelle)  // Le paramètre à évaluer est donc le suivant :  //       x-muh  // z =-------------------  //      Sqr(s^2/n)  //ou s représente la variance et n le nombre d'élément  // Pour comparer 2 moyennes expérimentales (xa et xb) le paramètre à évaluer est d  //           xa - xb  // z=---------------------------  //       ( sa^2     sb^2   )  //    Sqr(----- + -----  )  //       (  na         nb    )  // Les conditions sont : n >= 30  // ---------------------------------------------  // Deux écritures :  //   // MATH_EgaliteMoyennes (MoyenneObs;VarianceObs;NbElements;MoyenneVraie)  // MoyenneObs (Réel) : Moyenne Observée dans la série  // VarianceObs (Réel) : Variance Observée dans la série  // NbElements (Réel) : Nombre d'éléments de la série  // MoyenneVraie (Réel) : Valeur à comparer  // Renvoie $O (Réel)  représentant p le risque que ses 2 valeurs soient différentes  //   // MATH_EgaliteMoyennes (MoyenneA;VarianceA;NbElementsA;MoyenneB;  // VarianceB;NbElementsB)  // MoyenneA (Réel) : Moyenne Observée dans la série A  // VarianceA (Réel) : Variance Observée dans la série A  // NbElementsA (Réel) : Nombre d'éléments de la série A  // MoyenneB (Réel) : Moyenne Observée dans la série B  // VarianceB (Réel) : Variance Observée dans la série B  // NbElementsB (Réel) : Nombre d'éléments de la série B  // ---------------------------------------------  // MATHERROR  //   0 -> Pas d'erreur  //  -1 -> n <= 0  //  -2 -> variance nulle  // +1 -> Conditions non remplies (nA< 30 ou nB < 30)  // +2 -> Ecart-type négatif (mis à positif) ou nul  // +3 -> n n'est pas un entier (arrondi)  // ---------------------------------------------  // EXEMPLES  // ------------------------------------------------------  // ---------------   E N G L I S H   -----------------  // ------------------------------------------------------  // WARNING : This method needs MATH_LoiNormale  // ---------------------------------------------  // In its first syntax : this method compares an experimental mean to a given value  // In its second syntax : this method compares two experimental means  //   // Returns p, risk than its 2 values are different  // If p is greater than significant thershold (usually 5%), me may consider than means are different (rejection of hypothesis H0)  // Else, we can't conclude  //   // WARNING : this does not fit with usual method in statistics (first test, then calculation of p, if z is included in confidence interval)  // But in fact, result is equivalent.  // ---------------------------------------------  // Math's summary :  // Equality test of a mean and a given value  // This test allows to verify if experimental mean x coincide with a given data muh(real).  // Parameter to evaluate is following :  //       x-muh  // z =-------------------  //      Sqr(s^2/n)  //where s represents variance and n number of elements  // To compare 2 experimental means (xa et xb), parameter to evauate is d :  //           xa - xb  // z=---------------------------  //       ( sa^2     sb^2   )  //    Sqr(----- + -----  )  //       (  na         nb    )  // Conditions are : n >= 30  // ---------------------------------------------  // Two syntaxes :  // 1) MATH_EgaliteMoyennes (MoyenneObs;VarianceObs;NbElements;MoyenneVraie)  // MoyenneObs (Réel) : Observed mean in data serie  // VarianceObs (Réel) : Observed variance in data serie  // NbElements (Réel) : Number of elements in serie  // MoyenneVraie (Réel) : Value to compare  // Renvoie $0 (Réel)  represents p risk than its two values are different  // 2) MATH_EgaliteMoyennes (MeanA;VarianceA;NbElementsA;MeanB;  // VarianceB;NbElementsB)  // MeanA (Réel) : Observed mean in data serie A  // VarianceA (Réel) : Observed variance in data serie A  // NbElementsA (Réel) : Number of elements in serie A  // MeanB (Réel) : Observed mean in data serie B  // VarianceB (Réel) : Observed variance in data serie B  // NbElementsB (Réel) : Number of elements in serie B  // ---------------------------------------------  // MATHERROR  //   0 -> No error  //  -1 -> n <= 0  //  -2 -> Variance = zero  // +1 -> Conditions not filled (nA< 30 or nB < 30)  // +2 -> Negative standard deviation (put to positive) or nul  // +3 -> n is not integer (rounded)  // ---------------------------------------------  // EXAMPLES  // ------------------------------------------------------  //  (translation : BE 03-2010)End if   //@SVN_Folder: MATH_/C_REAL($0;$p_F;$1;$vMoyenneObs_F;$vMoyenneA_F;$2;$vVarianceObs_F;$vVarianceA_F)C_REAL($3;$vNbElementsObs_F;$vNbElementsA_F;$4;$vMoyenneVraie_F;$vMoyenneB_F)C_REAL($5;$vVarianceB_F;$6;$vNbElementsB_F;$z_F;$VarTravail_F)C_LONGINT($vMathError_L;MATHERROR)$vMathError_L:=0$p_F:=0  // par défautIf (Count parameters#6)  //Cas ou il s'agit de la comparaison avec une moyenne vraie$vMoyenneObs_F:=$1$vVarianceObs_F:=$2$vNbElementsObs_F:=$3$vMoyenneVraie_F:=$4  // Matherror n'est pas tout de suite calculée  // Car elle pourrait être parasitée par LoiNormaleCase of : ($vNbElementsObs_F<=1)  // Sinon division par zéro$vMathError_L:=-1: ($vVarianceObs_F=0)  // Sinon division par zéro$vMathError_L:=-2Else   // Erreurs corrigeables (du moins important au plus important)  // On n'utilise pas un "au cas où" car les modifications peuvent être multiples   If (($vNbElementsObs_F-Int($vNbElementsObs_F))#0)  // Pas un entier$vMathError_L:=3$vNbElementsObs_F:=Round($vNbElementsObs_F;0)  // ArrondiEnd if If ($vVarianceObs_F<0)$vMathError_L:=2$vVarianceObs_F:=Abs($vVarianceObs_F)  // Valeur absolueEnd if If ($vNbElementsObs_F<30)  // Conditions non remplies$vMathError_L:=1End if End case If ($vMathError_L>=0)  // Pas de drame => on continue$z_F:=$vMoyenneObs_F-$vMoyenneVraie_F$VarTravail_F:=Square root($vVarianceObs_F/$vNbElementsObs_F)$z_F:=$z_F/$VarTravail_F  // Calcul du paramètre  // Logiquement on vérifie que le paramètre est bien dans l'intervalle de pari$p_F:=1-(MATH_LoiNormale ($z_F;"P")*2)  // Puis on cacul pEnd if Else   // Cas ou il s'agit de la comparaison entre 2 moyennes observées$vMoyenneA_F:=$1$vVarianceA_F:=$2$vNbElementsA_F:=$3$vMoyenneB_F:=$4$vVarianceB_F:=$5$vNbElementsB_F:=$6Case of : (($vNbElementsA_F<=1) | ($vNbElementsB_F<=1))  // Sinon division par zéro$vMathError_L:=-1: (($vVarianceA_F=0) | ($vVarianceB_F=0))  // Sinon division par zéro$vMathError_L:=-2Else   // Erreurs corrigeables (du moins important au plus important)If (($vNbElementsA_F-Int($vNbElementsA_F))#0)  // Pas un entier$vMathError_L:=3$vNbElementsA_F:=Round($vNbElementsA_F;0)  // ArrondiEnd if If (($vNbElementsB_F-Int($vNbElementsB_F))#0)  // Pas un entier$vMathError_L:=3$vNbElementsB_F:=Round($vNbElementsB_F;0)  // ArrondiEnd if If ($vVarianceA_F<0)$vMathError_L:=2$vVarianceA_F:=Abs($vVarianceA_F)  // Valeur absolueEnd if If ($vVarianceB_F<0)$vMathError_L:=2$vVarianceB_F:=Abs($vVarianceB_F)  // Valeur absolueEnd if If (($vNbElementsA_F<30) | ($vNbElementsB_F<30))$vMathError_L:=1End if End case If ($vMathError_L>=0)  // Pas de drame => on continue$z_F:=$vMoyenneA_F-$vMoyenneB_F$VarTravail_F:=Square root(($vVarianceA_F/$vNbElementsA_F)+($vVarianceB_F/$vNbElementsB_F))$z_F:=$z_F/$VarTravail_F  // Logiquement on vérifie que le paramètre est bien dans l'intervalle de pari$p_F:=1-(MATH_LoiNormale ($z_F;"P")*2)  // Puis on cacul p    End if End if $0:=$p_F  // Enfin, on renvoie la valeur calculéeMATHERROR:=$vMathError_L  // Puis on renvoie le matherror de cette fonction