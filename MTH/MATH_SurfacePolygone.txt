C_POINTER($1;$2)C_REAL($0)$0:=MTH_GMY_PolygonArea ($1;$2)If (False)  ` MATH_SurfacePolygone [Bernard Escaich 18/07/2003]  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------   ` ------------------------------------------------------  `Cette méthode calcule la surface d'un polygone :  `Elle parcours tous les segments et additionne la surface entre le segment et l'axe des X, si le segment est orienté de gauche à droite  `ou soustrait la surface si le segment est orienté de droite à gauche.  ` ------------------------------------------------------  ` MATH_SurfacePolygone (->TableauAbscisses; ->TableauOrdonnées) -> Numérique  ` TableauAbscisses (Pointeur) Pointeur tableau réel des abscisses  ` TableauOrdonnées (Pointeur) Pointeur tableau réel des ordonnées  ` Résultat (Numérique) Surface  ` ---------------------------------------------  ` MATHERROR  ` 0 -> Pas d'erreur  ` -1 -> Tableaux de tailles différentes  ` -2 -> Tableaux contenant moins de 3 éléments  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  `This method calculates polygon area.  `It browses all segments and adds area between segment and X axis, if segment is  `or substract it, if segment is oriented from right to left  ` ------------------------------------------------------  ` MATH_SurfacePolygone (->AbscissasArray; ->OrdinatesArray) -> Real  ` AbscissasArray (Pointer) Pointer on abscissas real array  ` OrdinatesArray (Pointer) Pointer on ordoninates real array  ` Result (Real) Surface  ` ---------------------------------------------  ` MATHERROR  ` 0 -> No error  ` -1 -> Arrays with different lenght  ` -2 -> Arrays containig less than 3 elements  ` ---------------------------------------------  `  (translation : BE 03-2010)  `End if C_LONGINT(MATHERROR)C_POINTER($1;$2)C_REAL($0)$0:=0Case of : (Size of array($1->)#Size of array($2->))MATHERROR:=-1: (Size of array($1->)<3)MATHERROR:=-2Else MATHERROR:=0End case If (MATHERROR=0)C_LONGINT($i)C_REAL($X1;$X2;$Y1;$Y2;$X3;$Y3;$Surface)C_REAL($dx2;$dx3;$dy2;$dy3;$temp1;$temp2;$temp3)$Surface:=0ARRAY REAL($tabX;0)ARRAY REAL($tabY;0)COPY ARRAY($1->;$tabX)COPY ARRAY($2->;$tabY)If ($tabX{Size of array($tabX)}#$tabY{Size of array($tabX)})  ` le dernier élément de chaque tableauINSERT IN ARRAY($tabX;Size of array($tabX)+1)  `                    doit être égal au premier$tabX{Size of array($tabX)}:=$tabX{1}INSERT IN ARRAY($tabY;Size of array($tabY)+1)$tabY{Size of array($tabY)}:=$tabY{1}End if For ($i;1;Size of array($tabX)-1)$X1:=$tabX{$i}$Y1:=$tabY{$i}$X2:=$tabX{$i+1}$Y2:=$tabY{$i+1}$Surface:=$Surface-(($X2-$X1)*($Y2+$Y1)/2)End for $0:=Abs($Surface)End if End if 