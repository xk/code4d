C_TEXT($1;$2;$0)$0:=MTH_ARI_BigIntegers ($1;$2;$3)  `Work on International version  `TestéeIf (False)  ` MATH_GrandsEntiers [Robert Van Loo 02/2003, adaptée par A.G.]  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  ` Méthode permettant d'effectuer des opérations basiques sur de grands entiers  ` Ces entiers se présentent sous forme de texte  ` Leur longueur est donc limitée à 32000  ` Mais attention, le résultat est aussi un texte, avec aussi cette limitation  ` ---------------------------------------------  ` MATH_GrandsEntiers (TexteNombre1 ; Opération ; TexteNombre2) -> TexteRésultat  ` TexteNombre (Texte) Nombre sous forme de texte  ` Opération (Alpha) Opérateur, valeurs acceptées :  ` "+" pour l'addition  ` "-" pour la soustraction  ` "*" pour la multiplication  ` "/" pour la division  ` "%" ou "MOD" pour le modulo  ` "^" ou "EXP" pour la puissance  ` TexteRésultat (Texte) Résultat de l'opération  ` ---------------------------------------------  ` MATHERROR  `  0 -> Pas d'erreur  ` -1 -> Un des nombre au moins n'est pas un entier  ` -2 -> L'opérateur n'est pas une des valeurs acceptées  ` -3 -> Exposant négatif  ` -4 -> Division par zéro  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  `This method allows to carry out operations on great integers  `Those integers are passed as strings  `Length is limited to 32000  `Result is also a string, limited to 32000  ` ---------------------------------------------  ` MATH_GrandsEntiers (TextNumber1 ; Operation ; TextNumber2) -> TextResult  ` TextNumber (Texte) Number as a string  ` Opération (Alpha) Operator, accepted values :  ` "+" for addition  ` "-" for substraction  ` "*" for multiplication  ` "/" for division  ` "%" or "MOD" for modulo  ` "^" or "EXP" for power  ` TextResult (Texte) Operation's result  ` ---------------------------------------------  ` MATHERROR  `  0 -> No error  ` -1 -> At least one number is not an integer  ` -2 -> Operator is not recognized  ` -3 -> Negative exponent  ` -4 -> Division by zero  ` ------------------------------------------------------  `  (translation : BE 3-2010)C_LONGINT(MATHERROR)C_TEXT($1;$2;$0)ARRAY INTEGER($tNombre1;0)ARRAY INTEGER($tNombre2;0)C_TEXT($texte;$TexteChiffre)C_LONGINT($index;$longueur)$0:=""MATHERROR:=0Case of : (Substring($1;1;1)="+")$tNombre1{0}:=1$texte:=Substring($1;2;Length($1)-1): (Substring($1;1;1)="-")$tNombre1{0}:=-1$texte:=Substring($1;2;Length($1)-1)Else $tNombre1{0}:=1$texte:=$1End case $longueur:=Length($texte)ARRAY INTEGER($tNombre1;$longueur)For ($index;$longueur;1;-1)$TexteChiffre:=Substring($texte;$index;1)If ((Character code($TexteChiffre)>=48) & (Character code($TexteChiffre)<=57))$tNombre1{$index}:=Num(Substring($texte;$longueur-$index+1;1))Else MATHERROR:=-1  ` Attention, ceci n'est pas un nombre$index:=1End if End for Case of : (Substring($3;1;1)="+")$tNombre2{0}:=1$texte:=Substring($3;2;Length($3)-1): (Substring($3;1;1)="-")$tNombre2{0}:=-1$texte:=Substring($3;2;Length($3)-1)Else $tNombre2{0}:=1$texte:=$3End case $longueur:=Length($texte)ARRAY INTEGER($tNombre2;$longueur)For ($index;$longueur;1;-1)$TexteChiffre:=Substring($texte;$index;1)If ((Character code($TexteChiffre)>=48) & (Character code($TexteChiffre)<=57))$tNombre2{$index}:=Num(Substring($texte;$longueur-$index+1;1))Else MATHERROR:=-1  ` Attention, ceci n'est pas un nombre$index:=1End if End for If (MATHERROR=0)ARRAY INTEGER($tNombreUn;1)ARRAY INTEGER($tOperande1;0)ARRAY INTEGER($tOperande2;0)C_INTEGER($i;$Pilote;$Parametre)ARRAY INTEGER($tPilote;10)C_LONGINT($IProduit;$Quotient)C_LONGINT($IComparaisonVA)C_LONGINT($LProduit;$LProduit1;$LProduit2)C_LONGINT($LSommeVA1;$LSommeVA2)C_LONGINT($LDifferenceVA1;$LDifferenceVA2)C_LONGINT($LComparaisonVA1;$LComparaisonVA2)C_BOOLEAN($bSuperieurAUn)C_INTEGER($Chiffre1;$Chiffre2;$ChiffreQuotient;$Report)C_INTEGER($Comparaison;$CompDifferenceVA1;$CompQuotient1;$CompQuotient3)ARRAY INTEGER($tResultat;0)ARRAY INTEGER($tSomme;0)ARRAY INTEGER($tSommeVA;0)ARRAY INTEGER($tSommeVA1;0)ARRAY INTEGER($tSommeVA2;0)ARRAY INTEGER($tDifference;0)ARRAY INTEGER($tDifferenceVA;0)ARRAY INTEGER($tDifferenceVA1;0)ARRAY INTEGER($tDifferenceVA2;0)ARRAY INTEGER($tComplement;0)ARRAY INTEGER($tProduit;0)ARRAY INTEGER($tProduit1;0)ARRAY INTEGER($tProduit2;0)ARRAY INTEGER($tProduitPartiel;0)ARRAY INTEGER($tExposant;0)ARRAY INTEGER($tPuissance;0)ARRAY INTEGER($tPuissanceNombre;0)ARRAY INTEGER($tPuissancePartiel;0)ARRAY INTEGER($tQuotient;0)ARRAY INTEGER($tQuotientDividende;0)ARRAY INTEGER($tQuotientDiviseur;0)ARRAY INTEGER($tQuotientReste;0)ARRAY INTEGER($tQuotientPartiel;0)ARRAY INTEGER($tComparaisonVA;0)ARRAY INTEGER($tComparaisonVA1;0)ARRAY INTEGER($tComparaisonVA2;0)$tNombreUn{0}:=1$tNombreUn{1}:=1COPY ARRAY($tNombre1;$tOperande1)COPY ARRAY($tNombre2;$tOperande2)$tPilote{1}:=1$tPilote:=1Case of : ($2="+")$Pilote:=2: ($2="-")$Pilote:=3: ($2="*")$Pilote:=14: ($2="/")$Pilote:=20: (($2="%") | ($2="MOD"))$Pilote:=27: (($2="^") | ($2="EXP"))$Pilote:=16Else MATHERROR:=-2  ` mauvais opérateur      End case If (MATHERROR=0)While ($Pilote#1)Case of : ($Pilote=2)ARRAY INTEGER($tSomme;0)Case of : ($tOperande1{0}*$tOperande2{0}=1)$tPilote:=$tPilote+1$tPilote{$tPilote}:=7$Pilote:=9: ($tOperande1{0}*$tOperande2{0}=-1)$tPilote:=$tPilote+1$tPilote{$tPilote}:=8$Pilote:=10End case   `*******************************************fin du cas cSomme: ($Pilote=7)COPY ARRAY($tResultat;$tSomme)$tSomme{0}:=$tOperande1{0}$tResultat{0}:=$tOperande1{0}$Pilote:=$tPilote{$tPilote}  `*******************************************fin du cas cSomme1: ($Pilote=8)COPY ARRAY($tResultat;$tSomme)$tSomme{0}:=$tOperande1{0}$tResultat{0}:=$tOperande1{0}$Pilote:=$tPilote{$tPilote}  `*******************************************fin du cas cSomme2     : ($Pilote=3)ARRAY INTEGER($tDifference;0)COPY ARRAY($tOperande2;$tDifference)$tDifference{0}:=-$tDifference{0}$tOperande2{0}:=-$tOperande2{0}$Pilote:=2  `*******************************************fin du cas cDifference: ($Pilote=14)ARRAY INTEGER($tProduit1;0)ARRAY INTEGER($tProduit2;0)ARRAY INTEGER($tProduit;0)ARRAY INTEGER($tProduitPartiel;0)$LProduit1:=Size of array($tOperande1)$LProduit2:=Size of array($tOperande2)If ($LProduit1>=$LProduit2)COPY ARRAY($tOperande1;$tProduit1)COPY ARRAY($tOperande2;$tProduit2)Else COPY ARRAY($tOperande1;$tProduit2)COPY ARRAY($tOperande2;$tProduit1)$LProduit:=$LProduit1$LProduit1:=$LProduit2$LProduit2:=$LProduitEnd if $IProduit:=0COPY ARRAY($tProduit;$tOperande1)COPY ARRAY($tProduit;$tResultat)$Pilote:=15  `*******************************************fin du cas cProduit      : ($Pilote=15)$IProduit:=$IProduit+1If ($IProduit<=$LProduit2)COPY ARRAY($tResultat;$tProduit)ARRAY INTEGER($tProduitPartiel;0)ARRAY INTEGER($tProduitPartiel;$LProduit1+1)$Chiffre2:=$tProduit2{$IProduit}  ` %%%%%%%%%%%%%%%%%$Report:=0For ($i;1;$LProduit1)$Chiffre1:=(($tProduit1{$i}*$Chiffre2)+$Report)%10$tProduitPartiel{$i}:=$Chiffre1$Report:=(($tProduit1{$i}*$Chiffre2)+$Report)\10End for If ($Report>0)$tProduitPartiel{Size of array($tProduitPartiel)}:=$ReportEnd if INSERT IN ARRAY($tProduitPartiel;0;$IProduit-1)COPY ARRAY($tProduitPartiel;$tOperande2)COPY ARRAY($tProduit;$tOperande1)$tPilote:=$tPilote+1$tPilote{$tPilote}:=15$Pilote:=9Else COPY ARRAY($tResultat;$tProduit)$tProduit{0}:=$tProduit1{0}*$tProduit2{0}$tResultat{0}:=$tProduit{0}COPY ARRAY($tProduit;$tOperande1)$Pilote:=$tPilote{$tPilote}$tPilote:=$tPilote-1End if   `*******************************************fin du cas cProduit1: ($Pilote=16)ARRAY INTEGER($tExposant;0)ARRAY INTEGER($tPuissanceNombre;0)ARRAY INTEGER($tPuissancePartiel;0)ARRAY INTEGER($tPuissance;0)COPY ARRAY($tOperande1;$tPuissanceNombre)COPY ARRAY($tOperande1;$tPuissancePartiel)COPY ARRAY($tOperande2;$tExposant)If ($tExposant{0}=-1)MATHERROR:=-3  ` exposants négatifs$Pilote:=1Else COPY ARRAY($tExposant;$tResultat)$Pilote:=17End if   `*******************************************fin du cas cPuissance: ($Pilote=17)COPY ARRAY($tResultat;$tExposant)Case of : (Size of array($tExposant)>1)$bSuperieurAUn:=True: ((Size of array($tExposant)=1) & ($tExposant{1}>1))$bSuperieurAUn:=True: ((Size of array($tExposant)=1) & ($tExposant{1}=1))$bSuperieurAUn:=FalseEnd case If ($bSuperieurAUn)$Pilote:=18Else COPY ARRAY($tPuissancePartiel;$tResultat)$Pilote:=$tPilote{$tPilote}End if   `*******************************************fin du cas cPuissance1 : ($Pilote=18)COPY ARRAY($tPuissancePartiel;$tOperande1)COPY ARRAY($tPuissanceNombre;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=19$Pilote:=14  `*******************************************fin du cas cPuissance2 : ($Pilote=19)COPY ARRAY($tResultat;$tPuissancePartiel)COPY ARRAY($tExposant;$tOperande1)COPY ARRAY($tNombreUn;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=17$Pilote:=10  `*******************************************fin du cas cPuissance3: ($Pilote=20)ARRAY INTEGER($tQuotientDividende;0)ARRAY INTEGER($tQuotientDiviseur;0)ARRAY INTEGER($tQuotientReste;0)ARRAY INTEGER($tQuotientPartiel;0)ARRAY INTEGER($tQuotient;0)COPY ARRAY($tOperande1;$tQuotientDividende)COPY ARRAY($tOperande2;$tQuotientDiviseur)While (($tQuotientDiviseur{Size of array($tQuotientDiviseur)}=0) & (Size of array($tQuotientDiviseur)>1))DELETE FROM ARRAY($tQuotientDiviseur;Size of array($tQuotientDiviseur);1)End while If ((Size of array($tQuotientDiviseur)=1) & ($tQuotientDiviseur{1}=0))MATHERROR:=-4  ` division par zéro$Pilote:=1Else COPY ARRAY($tQuotientDividende;$tOperande1)COPY ARRAY($tQuotientDiviseur;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=21$Pilote:=11End if   `*******************************************fin du cas cQuotient: ($Pilote=21)$CompQuotient1:=$ParametreCase of : ($CompQuotient1=0)ARRAY INTEGER($tQuotient;1)$tQuotient{0}:=$tQuotientDividende{0}*$tQuotientDiviseur{0}$tQuotient{1}:=1ARRAY INTEGER($tQuotientReste;1)$tQuotientReste{0}:=1$tQuotientReste{1}:=0COPY ARRAY($tQuotient;$tResultat)$Pilote:=$tPilote{$tPilote}: ($CompQuotient1=2)ARRAY INTEGER($tQuotient;1)$tQuotient{0}:=$tQuotientDividende{0}*$tQuotientDiviseur{0}$tQuotient{1}:=0COPY ARRAY($tQuotientDividende;$tQuotientReste)COPY ARRAY($tQuotient;$tResultat)$Pilote:=$tPilote{$tPilote}: ($CompQuotient1=1)$Quotient:=Size of array($tQuotientDividende)-Size of array($tQuotientDiviseur)INSERT IN ARRAY($tQuotientDiviseur;1;$Quotient)$Quotient:=$Quotient+1ARRAY INTEGER($tQuotient;$Quotient)$tQuotient{0}:=$tQuotientDividende{0}*$tQuotientDiviseur{0}$Quotient:=$Quotient+1$Pilote:=22COPY ARRAY($tQuotientDividende;$tResultat)End case   `*******************************************fin du cas cQuotient1: ($Pilote=22)$Quotient:=$Quotient-1COPY ARRAY($tResultat;$tQuotientDividende)If ($Quotient>0)$ChiffreQuotient:=0ARRAY INTEGER($tQuotientPartiel;0)COPY ARRAY($tQuotientDiviseur;$tQuotientPartiel)COPY ARRAY($tQuotientDividende;$tOperande1)COPY ARRAY($tQuotientDiviseur;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=23$Pilote:=11Else Case of : ($tQuotient{0}=1)COPY ARRAY($tQuotientDividende;$tQuotientReste)COPY ARRAY($tQuotient;$tResultat)$Pilote:=$tPilote{$tPilote}: ($tQuotient{0}=-1)$tQuotient{1}:=$tQuotient{1}+1COPY ARRAY($tQuotientDiviseur;$tOperande1)COPY ARRAY($tQuotientDividende;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=26$Pilote:=10End case End if   `*******************************************fin du cas cQuotient2      : ($Pilote=23)$CompQuotient3:=$ParametreCase of : ($CompQuotient3=0)$ChiffreQuotient:=$ChiffreQuotient+1$tQuotient{$Quotient}:=$ChiffreQuotientARRAY INTEGER($tQuotientReste;1)$tQuotientReste{0}:=1$tQuotientReste{1}:=0COPY ARRAY($tQuotient;$tResultat)$Pilote:=$tPilote{$tPilote}: ($CompQuotient3=1)$ChiffreQuotient:=$ChiffreQuotient+1COPY ARRAY($tQuotientDiviseur;$tOperande1)COPY ARRAY($tQuotientPartiel;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=24$Pilote:=9: ($CompQuotient3=2)$tQuotient{$Quotient}:=$ChiffreQuotientCase of : (($ChiffreQuotient>0) & ($Quotient>1))COPY ARRAY($tQuotientPartiel;$tOperande1)COPY ARRAY($tQuotientDiviseur;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=25$Pilote:=10: (($ChiffreQuotient=0) & ($Quotient>1))DELETE FROM ARRAY($tQuotientDiviseur;1;1)$Pilote:=22: (($ChiffreQuotient>0) & ($Quotient=1))COPY ARRAY($tQuotientPartiel;$tOperande1)COPY ARRAY($tQuotientDiviseur;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=25$Pilote:=10End case End case   `*******************************************fin du cas cQuotient3      : ($Pilote=24)COPY ARRAY($tResultat;$tQuotientPartiel)COPY ARRAY($tQuotientDividende;$tOperande1)COPY ARRAY($tQuotientPartiel;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=23$Pilote:=11  `*******************************************fin du cas cQuotient4: ($Pilote=25)COPY ARRAY($tResultat;$tQuotientPartiel)If ($Quotient>1)DELETE FROM ARRAY($tQuotientDiviseur;1;1)End if COPY ARRAY($tQuotientDividende;$tOperande1)COPY ARRAY($tQuotientPartiel;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=22$Pilote:=10  `*******************************************fin du cas cQuotient5: ($Pilote=26)COPY ARRAY($tResultat;$tQuotientReste)COPY ARRAY($tQuotient;$tResultat)$Pilote:=$tPilote{$tPilote}  `*******************************************fin du cas cQuotient6: ($Pilote=27)$tPilote:=$tPilote+1$tPilote{$tPilote}:=28$Pilote:=20  `*******************************************fin du cas cModulo: ($Pilote=28)COPY ARRAY($tQuotientReste;$tResultat)$tPilote:=$tPilote-1$Pilote:=$tPilote{$tPilote}  `*******************************************fin du cas cModulo1      : ($Pilote=9)ARRAY INTEGER($tSommeVA;0)ARRAY INTEGER($tSommeVA1;0)ARRAY INTEGER($tSommeVA2;0)COPY ARRAY($tOperande1;$tSommeVA1)COPY ARRAY($tOperande2;$tSommeVA2)  `*****algorithme sommeVA, résultat  dans $tSommeVA$LSommeVA1:=Size of array($tSommeVA1)$LSommeVA2:=Size of array($tSommeVA2)Case of : ($LSommeVA1>$LSommeVA2)$LSommeVA:=$LSommeVA1INSERT IN ARRAY($tSommeVA2;$LSommeVA2+1;$LSommeVA1-$LSommeVA2): ($LSommeVA1<$LSommeVA2)$LSommeVA:=$LSommeVA2INSERT IN ARRAY($tSommeVA1;$LSommeVA1+1;$LSommeVA2-$LSommeVA1)Else $LSommeVA:=$LSommeVA1End case INSERT IN ARRAY($tSommeVA;1;$LSommeVA)$Report:=0For ($i;1;$LSommeVA)$Chiffre:=(($tSommeVA1{$i})+($tSommeVA2{$i})+$Report)%10$tSommeVA{$i}:=$Chiffre$Report:=(($tSommeVA1{$i})+($tSommeVA2{$i})+$Report)\10End for If ($Report=1)INSERT IN ARRAY($tSommeVA;Size of array($tSommeVA)+1;1)$tSommeVA{$LSommeVA+1}:=$ReportEnd if   `*****fin de l'algorithme sommeVAWhile (($tSommeVA{Size of array($tSommeVA)}=0) & (Size of array($tSommeVA)>1))DELETE FROM ARRAY($tSommeVA;Size of array($tSommeVA);1)End while $Pilote:=$tPilote{$tPilote}$tPilote:=$tPilote-1COPY ARRAY($tSommeVA;$tResultat)  `*******************************************fin du cas cSommeVA: ($Pilote=10)$tPilote:=$tPilote+1$tPilote{$tPilote}:=12$Pilote:=11  `*******************************************fin du cas cDifferenceVA: ($Pilote=12)ARRAY INTEGER($tDifferenceVA1;0)ARRAY INTEGER($tDifferenceVA2;0)$CompDifferenceVA1:=$ParametreIf ($CompDifferenceVA1=0)ARRAY INTEGER($tDifferenceVA;1)$tDifferenceVA{0}:=1$tDifferenceVA{1}:=0COPY ARRAY($tDifferenceVA;$tResultat)$Pilote:=$tPilote{$tPilote}$tPilote:=$tPilote-1Else Case of : ($CompDifferenceVA1=1)COPY ARRAY($tOperande1;$tDifferenceVA1)COPY ARRAY($tOperande2;$tDifferenceVA2): ($CompDifferenceVA1=2)COPY ARRAY($tOperande2;$tDifferenceVA1)COPY ARRAY($tOperande1;$tDifferenceVA2)End case $LDifferenceVA1:=Size of array($tDifferenceVA1)$LDifferenceVA2:=Size of array($tDifferenceVA2)  `*****calcul du complément à 10 de la seconde opérandeINSERT IN ARRAY($tDifferenceVA2;$LDifferenceVA2+1;$LDifferenceVA1-$LDifferenceVA2)ARRAY INTEGER($tComplement;$LDifferenceVA1)For ($i;1;$LDifferenceVA1)$tComplement{$i}:=9-$tDifferenceVA2{$i}End for $tComplement{1}:=$tComplement{1}+1  `*****fin du calcul du complément à 10   COPY ARRAY($tDifferenceVA1;$tOperande1)COPY ARRAY($tComplement;$tOperande2)$tPilote:=$tPilote+1$tPilote{$tPilote}:=13$Pilote:=9End if   `*******************************************fin du cas cDifferenceVA1: ($Pilote=13)ARRAY INTEGER($tDifferenceVA;0)COPY ARRAY($tResultat;$tDifferenceVA)$tDifferenceVA{0}:=$tDifferenceVA1{0}DELETE FROM ARRAY($tDifferenceVA;Size of array($tDifferenceVA);1)While ($tDifferenceVA{Size of array($tDifferenceVA)}=0)DELETE FROM ARRAY($tDifferenceVA;Size of array($tDifferenceVA);1)End while COPY ARRAY($tDifferenceVA;$tResultat)$Pilote:=$tPilote{$tPilote}$tPilote:=$tPilote-1  `*******************************************fin du cas cDifferenceVA2: ($Pilote=11)ARRAY INTEGER($tComparaisonVA;0)ARRAY INTEGER($tComparaisonVA1;0)ARRAY INTEGER($tComparaisonVA2;0)COPY ARRAY($tOperande1;$tComparaisonVA1)COPY ARRAY($tOperande2;$tComparaisonVA2)While ($tComparaisonVA1{Size of array($tComparaisonVA1)}=0)DELETE FROM ARRAY($tComparaisonVA1;Size of array($tComparaisonVA1);1)End while While ($tComparaisonVA2{Size of array($tComparaisonVA2)}=0)DELETE FROM ARRAY($tComparaisonVA2;Size of array($tComparaisonVA2);1)End while $LComparaisonVA1:=Size of array($tComparaisonVA1)$LComparaisonVA2:=Size of array($tComparaisonVA2)$Comparaison:=0Case of : ($LComparaisonVA1>$LComparaisonVA2)$Comparaison:=1: ($LComparaisonVA1<$LComparaisonVA2)$Comparaison:=2Else $IComparaisonVA:=$LComparaisonVA1While (($tComparaisonVA1{$IComparaisonVA}=$tComparaisonVA2{$IComparaisonVA}) & ($IComparaisonVA>0))$IComparaisonVA:=$IComparaisonVA-1End while Case of : (($tComparaisonVA1{$IComparaisonVA}>$tComparaisonVA2{$IComparaisonVA}) & ($IComparaisonVA>0))$Comparaison:=1: (($tComparaisonVA1{$IComparaisonVA}<$tComparaisonVA2{$IComparaisonVA}) & ($IComparaisonVA>0))$Comparaison:=2: ($IComparaisonVA=0)$Comparaison:=0End case End case $Pilote:=$tPilote{$tPilote}$tPilote:=$tPilote-1$Parametre:=$Comparaison  `*******************************************fin du cas cComparaisonVA    End case End while If (Size of array($tResultat)>0)Case of : ($tResultat{0}=1)$0:="+": ($tResultat{0}=-1)$0:="-"End case End if For ($i;Size of array($tResultat);1;-1)$0:=$0+String($tResultat{$i})End for End if End if End if 