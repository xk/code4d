C_REAL($0;$1;$3;$4)C_STRING(32;$2)$0:=MTH_STA_StandardDistribution ($1;$2;$3;$4)If (False)  ` MATH_LoiNormale [Teddy Linet 10/02]  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  ` ATTENTION : Méthode récursive  ` ---------------------------------------------  ` Rappels mathématiques :  ` Loi normale (ou loi de Gauss ou de Laplace-Gauss)  ` La méthode calcule la probabilité d'une loi normale centrée réduite  ` entre O et x  ` La méthode utilise une approximation d'environ 10^-5  ` Som:=x+(((-x^2/2)/1)*(x/3))+((((-x^2)^2/2)/2)*(x/5))+...  ` P:=Som*((2*Pi)^0.5)  ` Pour calculer un alpha entre -x et +x :  ` alpha:=1-(MATH_LoiNormale(x)*2)  ` alpha représente la probabilité que la variable ne se trouve pas entre -x et+x  ` ---------------------------------------------  ` MATH_LoiNormale admet deux syntaxes :  `  ` Pour calculer P  ` MATH_LoiNormale(x;"P" {;Moyenne {;EcartType}}}) -> Numérique  ` x (Numérique) Valeur du x  ` "P" (Chaine fixe) Option calcul de P ou constante Normale_p  ` Moyenne (Numérique) Valeur de la moyenne, par défaut =0  ` EcartType (Numérique) Valeur de l'écart type, par défaut =1  ` Résultat (Numérique) Probabilité que la variable se trouve entre 0 et x  `  ` Pour calculer Z  ` MATH_LoiNormale(alpha;"Z" {;Moyenne {;EcartType}}) -> Numérique  ` alpha (Numérique) Valeur de alpha  ` "Z" (Chaine fixe) Option calcul de Z ou constante Normale_Z  ` Moyenne (Numérique optionnel) Valeur de la moyenne, par défaut =0  ` EcartType (Numérique optionnel) Valeur de l'écart type, par défaut =1  ` Résultat (Numérique) Ualpha, abscisse sur la ligne en fonction de alpha  ` ---------------------------------------------  ` MATHERROR  ` 0 -> Pas d'erreur  ` -1 -> Alpha n'est pas correct (pas une proportion)  ` +1 -> Alpha trop petit, rectifié automatiquement  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  ` WARNING : recursive method  ` ---------------------------------------------  `Math's summary  ` Normal distribution (or Gaussian distribution or Laplace-Gauss)  ` This method computes probability of a centered normal distribution reduced between  0 et x  ` It uses an approximation about 10^-5  ` Sum:=x+(((-x^2/2)/1)*(x/3))+((((-x^2)^2/2)/2)*(x/5))+...  ` P:=Sum*((2*Pi)^0.5)  ` To compute an alpha between -x and +x :  ` alpha:=1-(MATH_LoiNormale(x)*2)  ` alpha represents probability than variable is not between -x and +x  ` ---------------------------------------------  ` MATH_LoiNormale accepts two syntaxes :  `  ` To compute P  ` MATH_LoiNormale(x;"P" {;Mean {;StandardDeviation}}}) -> Real  ` x (Real) Value of x  ` "P" (String) Option calculation of P or constant Normale_p  ` Mean (Real) Value of mean, defaut =0  ` StandardDeviation (Real) Valeur of standard deviation, defaut =1  ` Result (Real) Probability that variable is between 0 and x  `  ` To compute Z  ` MATH_LoiNormale(alpha;"Z" {;Mean {;StandardDeviation}}) -> Real  ` alpha (Real) Value of alpha  ` "Z" (Chaine fixe) Option calculation of Z or constant Normale_Z  ` Mean (Real optional) Value of mean, defaut =0  ` StandardDeviation (Real optional) Value of standard deviation, defaut =1  ` Result (Real) Ualpha, abscissa on line function of alpha  ` ---------------------------------------------  ` MATHERROR  `    0 -> No error  `  -1 -> Alpha is not correct (not a proportion)  ` +1 -> Alpha too small, automatically correctedt  ` ------------------------------------------------------  `  (translation : BE 03-2010)  `End if C_LONGINT(MATHERROR)MATHERROR:=0C_INTEGER($i)C_REAL($0;$1;$3;$4;$t;$vFact_F;$vSomme_F;$vCalc_F;$vMoyenne_F;$vEcartType_F)C_REAL($vUalpha_F;$vAlpha_F;$vMin_F;$vMax_F)C_STRING(32;$2)$0:=0  ` Par défautCase of : (Count parameters<=2)  ` Centré et réduit (par défaut)$vMoyenne_F:=0$vEcartType_F:=1: (Count parameters<=3)  ` Réduit, pas centré => On centre$vMoyenne_F:=$3$vEcartType_F:=1: (Count parameters<=4)  ` Ni réduit, ni centré => On centre et on réduit$vMoyenne_F:=$3$vEcartType_F:=Abs($4)  ` Evitons les erreurs de calcul (toujour positif normalement)End case If ($2#"@z@")  ` Il ne s'agit pas de l'option Z => option P  ` Calcul de $t, centré et réduit en fonction de x ($1), la moyenne et l'écarttype$t:=Abs(($1-$vMoyenne_F)/$vEcartType_F)$vSomme_F:=$t$vFact_F:=$t$i:=0$vCalc_F:=-($t^2)/2While (Abs($vFact_F)>(10^-7))$i:=$i+1$vFact_F:=$vFact_F*$vCalc_F*(2*$i-1)/(2*$i+1)/$i$vSomme_F:=$vSomme_F+$vFact_FEnd while $0:=Round($vSomme_F/((2*Pi )^0,5);4)  ` Arrondi à 4 décimales car limites de l'approximationElse   ` Option Z => calcul de Ualpha par dichotomie (utilise l'option P)$vAlpha_F:=$1  ` Un alpha doit toujours être positifCase of : (($vAlpha_F>1) | ($vAlpha_F<0))MATHERROR:=-1  ` Alpha doit être compris entre 0 et 1: ($vAlpha_F<0,0001)MATHERROR:=1  ` "Alpha trop petit"$vAlpha_F:=0,0001End case If (MATHERROR>=0)$vUalpha_F:=3,89059  ` Soit supérieur à un alpha à 0,0001$vMin_F:=0$vMax_F:=$vUalpha_FRepeat $vCalc_F:=1-(MATH_LoiNormale ($vUalpha_F;"P";$vMoyenne_F;$vEcartType_F)*2)If ($vAlpha_F>$vCalc_F)  ` Dichotomie car fonction linéairement croissante$vMax_F:=$vUalpha_F  ` Trop grand => on divise par 2Else $vMin_F:=$vUalpha_F  ` Trop petit => on rajoute la moitiéEnd if $vUalpha_F:=$vMin_F+(($vMax_F-$vMin_F)/2)Until (Abs($vCalc_F-$vAlpha_F)<(10^-5))$0:=Round($vUalpha_F;4)  ` Arrondi à 4 décimales car limites de l'approximationEnd if End if End if 