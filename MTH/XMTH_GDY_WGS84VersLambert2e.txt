  `This method is part from Math4D project 2002-2010 with authors : Jacques Bossy, Philip Burns, Olivier Deschanels, Marc Duc-Jacquet  `Bernard Escaich, Antoine Galmiche, Micaël Germann, George F. Huhn, Nicolas Jore, Teddy Linet, Frédéric Quoirez, Michel Saiz, Robert Van Loo   If (False)  `XMTH_GDY_WGS84VersLambert2e (was XMATH_WGS84VersLambert2e)  `Auteur :   `Date :   ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  `To be validated  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  `A valider  ` ------------------------------------------------------  `  (translation : BE 03-2010)End if C_REAL($1;$2;$3;$5;$6;$7)C_STRING(2;$4;$8)If (False)C_REAL(XMTH_GDY_WGS84VersLambert2e ;$1)C_REAL(XMTH_GDY_WGS84VersLambert2e ;$2)C_REAL(XMTH_GDY_WGS84VersLambert2e ;$3)C_STRING(XMTH_GDY_WGS84VersLambert2e ;2;$4)C_REAL(XMTH_GDY_WGS84VersLambert2e ;$5)C_REAL(XMTH_GDY_WGS84VersLambert2e ;$6)C_REAL(XMTH_GDY_WGS84VersLambert2e ;$7)C_STRING(XMTH_GDY_WGS84VersLambert2e ;2;$8)End if C_REAL($d_long;$m_long;$s_long;$d_lat;$m_lat;$s_lat)C_STRING(2;$orientation_long;$orientation_lat)C_REAL($X_w;$Y_w;$Z_w)C_REAL($X_n;$Y_n;$Z_n)C_REAL($phi_n;$lambda_n)C_REAL($lambda_w;$phi_w;$a_w;$b_w;$e_w;$N)C_REAL($a_n;$b_n;$e2_n;$epsilon;$p1;$p0;$e_n;$lambda0;$L)C_REAL($n;$c;$Xs;$Ys)C_REAL($X_l2e;$Y_l2e)$d_long:=$1$m_long:=$2$s_long:=$3$orientation_long:=$4$d_lat:=$5$m_lat:=$6$s_lat:=$7$orientation_lat:=$8  ` ---------------- deg-min-sec + orientation (NWSE) -> radians  ` pour la longitude$lambda_w:=$d_long+($m_long/60)+($s_long/3600)If ($orientation_long="W")  ` Le système de coordonnées géographiques utilisé$lambda_w:=-$lambda_w  `  est positif vers le Nord et vers l'EstEnd if $lambda_w:=$lambda_w*Pi /180  ` pour la latitude$phi_w:=$d_lat+($m_lat/60)+($s_lat/3600)If ($orientation_lat="S")  ` Le système de coordonnées géographiques utilisé$phi_w:=-$phi_w  `  est positif vers le Nord et vers l'EstEnd if $phi_w:=$phi_w*Pi /180  ` ---------------- coordonnées géographiques WGS84 ($lambda_w;$phi_w)  ` ----------------  -> coord cartésiennes WGS84 ($X_w;$Y_w;$Z_w)$a_w:=6378137$b_w:=6356752,314$e2_w:=(($a_w*$a_w)-($b_w*$b_w))/($a_w*$a_w)$N:=$a_w/Square root(1-($e2_w*(Sin($phi_w)^2)))  ` grande normale de l'ellipsoïde WSG84$X_w:=$N*Cos($phi_w)*Cos($lambda_w)$Y_w:=$N*Cos($phi_w)*Sin($lambda_w)$Z_w:=$N*(1-$e2_w)*Sin($phi_w)  ` ---------------- coord cartésiennes WGS84 ($X_w;$Y_w;$Z_w)  ` ----------------  -> coord cartésiennes NTF ($X_n;$X_n;$Z_n)$X_n:=$X_w+168$X_n:=$X_w+60$Z_n:=$Z_w-320  ` ---------------- coord cartésiennes NTF ($X_n;$X_n;$Z_n)  ` ----------------  -> coord géographiques NTF ($phi_n;$lambda_n)$a_n:=6378249,2$b_n:=6356515$e2_n:=(($a_n*$a_n)-($b_n*$b_n))/($a_n*$a_n)$epsilon:=10^(-10)  ` tolérance de convergence$p0:=Arctan($Z_n/Square root(($X_n*$X_n)+($Y_n*$Y_n))*(1-($a_n*$e2_n)/(Square root(($X_n*$X_n)+($Y_n*$Y_n)+($Z_n*$Z_n)))))$p1:=Arctan(($Z_n/Square root(($X_n*$X_n)+($Y_n*$Y_n)))/(1-($a_n*$e2_n*Cos($p0))/(Square root((($X_n*$X_n)+($Y_n*$Y_n))*(1-($e2_n*(Sin($p0^2))))))))While (Not(Abs($p1-$p0)<$epsilon))$p0:=$p1$p1:=Arctan(($Z_n/Square root(($X_n*$X_n)+($Y_n*$Y_n)))/(1-($a_n*$e2_n*Cos($p0))/(Square root((($X_n*$X_n)+($Y_n*$Y_n))*(1-($e2_n*(Sin($p0^2))))))))End while $phi_n:=$p1$lambda_n:=Arctan($Y_n/$X_n)  ` ---------------- coord géographiques NTF ($phi_n;$lambda_n)  ` ----------------  -> coord projetées Lambert II étendu ($X_l2e;$Y_l2e)$n:=0,7289686274$c:=11745793,39$Xs:=600000$Ys:=8199695,768$e_n:=Square root($e2_n)$lambda0:=0,04079234433198  ` $lambda0 correspond à la longitude en radian de Paris  ` (2°20'14.025" E) par rapport à Greenwich.  ` calcul de la latitude isométrique$L:=Log(Tan((Pi /4)+($phi_n/2))*(((1-($e_n*Sin($phi_n)))/(1+($e_n*Sin($phi_n))))^($e_n/2)))  ` (elle était costaud celle-là !)$X_l2e:=$Xs+($c*Exp((-$n)*$L)*Sin($n*($lambda_n-$lambda0)))$Y_l2e:=$Ys+($c*Exp((-$n)*$L)*Cos($n*($lambda_n-$lambda0)))