C_STRING(255;$1)C_LONGINT($2;$3)C_STRING(255;$0)$0:=MTH_ARI_ChangeBase ($1;$2;$3)  `Work on International version  `TestéeIf (False)  `MATH_ChangeBase   `Auteur : Micaël Germann  `Date : 25/07/2002  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  ` Cette fonction permet d'exprimer  ` un nombre entier positif donné dans une autre base quelconque.  ` Limitations:  ` - les bases supérieures à 36 ne sont pas reconnues, faute de symbolique adéquate connue de l'auteur  ` - les nombres sont exprimés en chaine de caractères, ce qui implique que leurs représentations ne doit pas  excéder 255 caractères (limite actuelle de 4D).  ` - Le nombre doit être inférieur à MaxLong  ` ---------------------------------------------   ` Rappels mathématiques :  ` Un nombre entier peut être exprimé dans n'importe quelle base.  ` Dans la vie quotidienne, la base 10 est utilisée (notation décimale), en informatique il est fréquent de parler en base 16 (notation hexadécimale),  ` voir en base 8 pour des anciens systèmes (notation octale).  ` Les informations sont physiquement stockées en base 2 dans un ordinateur (notation binaire), mais il peut être parfois utile de coder un nombre dans  ` une base supérieure, afin de diminuer la place prise par sa représentation.  ` RAPPEL: il ne s'agit que de la représenatation du nombre, pas sa valeur qui elle reste inchangée.  ` L'algorithme de conversion proposé ci-dessous travail en deux temps:  ` 1- conversion du nombre en base 10 par élévation à la puissance de la base d'origine de chaque digit en fonction de son ordre.  ` 2 - conversion dans la base de destination par modulo et division entière.  ` ---------------------------------------------  ` MATH_ChangeBase (ChaineNombre; BaseOrigine; BaseDestination) -> Chaine  ` ChaineNombre (Alpha 255car) Nombre dont on veut une autre représentation  ` BaseOrigine (Numérique) Base dans laquelle le nombre est exprimé  ` BaseDestination (Numérique) Base dans laquelle on veut sa représentation  ` Résultat (Chaine) Représentation  ` ---------------------------------------------  ` MATHERROR  ` 0 -> Pas d'erreur  ` -1 -> Au moins un car. de chaine nombre n'est pas compatible avec base origine  ` -2 -> Une des bases n'est pas gérée (non comprise dans l'intervalle [2;36])  ` -3 -> La chaine résultante dépasse 255 caractères  ` -4 -> La valeur de Nombre en base 10 est supérieur ou égal à MaxLong  ` ---------------------------------------------  ` ATTENTION  ` Pensez à utiliser une chaine suffisament longue pour le résultat  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  `This fuction allows to express an positive integer given in any another radix  ` Limitations:  `- radix upon 36 are recognized, because symbolics unkwnon by author  `- numbers are returned as strings, which implies that representation is limited to 255 characters  `- numbers must be les or equal to MaxLong  ` ---------------------------------------------   ` Math's summary  `An integer may be expressed in any radix  `In usual life, base 10 is used (decimal system) ; in computing, base 16 is frequently used (hexadecimal system) ; for old systems, base 8 was used.  `Informations are physically stored in base 2 (binary system), but it is sometimes usefull to code a number in a greater base, in order to minize space occupied.  ` REMINDER : we speak only about representation, not about value  `Conversion algorithm proposed below works in two stages  `1 - conversion in base 10 by raising number at origin base's power for each digit  `2 - conversion in destination base by modulo and integer division  ` ---------------------------------------------  ` MATH_ChangeBase (StringNumber; OriginBase; DestinationBase) -> String  ` StringNumber (Alpha 255char) Number to convert in another base  ` BaseOrigine (Numérique) Base in which is expressed number  ` BaseDestination (Numérique) Base in which one wants to express number  ` Result (String) Representation  ` ---------------------------------------------  ` MATHERROR  ` 0 -> No error  ` -1 -> Au moins un car. de chaine nombre n'est pas compatible avec base origine  ` -2 -> Une des bases n'est pas gérée (non comprise dans l'intervalle [2;36])  ` -3 -> La chaine résultante dépasse 255 caractères  ` -4 -> La valeur de Nombre en base 10 est supérieur ou égal à MaxLong  ` ---------------------------------------------  ` WARNING  `Use a string long enough to store result  ` ------------------------------------------------------  `  (translation : BE 3-2010)End if C_LONGINT(MATHERROR)C_STRING(255;$1)C_LONGINT($2;$3)C_STRING(255;$0)$0:=""  ` Traitement des erreurs de baseCase of : (($2<2) | ($2>36) | ($3<2) | ($3>36))  ` les bases indiquées sont-elles supportées ?MATHERROR:=-2Else MATHERROR:=0End case   ` AlgorithmeIf (MATHERROR=0)C_STRING(255;$Nbre;$NewBase)C_STRING(36;$Caract)C_LONGINT($Origine;$Destination;$Base10)$Origine:=$2$Destination:=$3$Caract:="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"$Nbre:=Uppercase($1)  ` Les caractères du nombre sont-ils corrects ?$OK:=TrueFor ($t;1;Length($Nbre))  ` On boucle sur tous les caractères$pos:=Position($Nbre≤$t≥;$Caract)If (($pos>$Origine) | ($pos=0))  ` Le caractère doit appartenir à la base d'origine$OK:=False  `Si ce n'est pas le cas, on le signale à l'algorithme de conversion$t:=256  ` et on sort de la boucle, inutile de vérifier plus loinEnd if End for If ($OK)  ` Si la chaine est vérifiée, on convertit le nombre en base dixIf ($Origine#10)  ` Traitement conventionnel si la base d'origine # 10$Base10:=0For ($t;1;Length($Nbre))  ` Conversion caractère par caractère$Base10:=($Base10*$Origine)+Position($Nbre≤$t≥;$Caract)-1End for Else $Base10:=Num($Nbre)  ` Plus rapide si la donnée est déjà en base 10End if If (($Base10>0) & ($Base10<MAXLONG ))  ` Lors d'un dépassement, il peut arriver que le résultat soit <0      $NewBase:=""  ` Puis on converti dans la base demandéeRepeat If (Length($NewBase)<255)  ` Attention à ne pas dépasser 255 caractères$t:=Mod($Base10;$Destination)  ` Conversion$NewBase:=$Caract≤$t+1≥+$NewBase$Base10:=$Base10\$DestinationElse $OK:=False  ` Le résultat dépasse 255 caractèresEnd if Until (($Base10=0) | (Not($OK)))If ($OK)$0:=$NewBase  ` Tout s'est bien passéElse MATHERROR:=-3  ` Le résultat dépasse 255 caractèresEnd if Else MATHERROR:=-4  ` Le nombre est supérieur ou égal à MaxLongEnd if Else MATHERROR:=-1  ` Au moins un caractère n'appartient pas à la base d'origineEnd if End if 