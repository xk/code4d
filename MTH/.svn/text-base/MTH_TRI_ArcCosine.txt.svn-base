  `This method is part from Math4D project 2002-2010 with authors : Jacques Bossy, Philip Burns, Olivier Deschanels, Marc Duc-Jacquet  `Bernard Escaich, Antoine Galmiche, Micaël Germann, George F. Huhn, Nicolas Jore, Teddy Linet, Frédéric Quoirez, Michel Saiz, Robert Van Loo   If (False)  `MTH_TRI_ArcCosine (was MATH_ArcCosinus)    `Auteur : Micaël Germann  `Date : 19/1/1999,31/3/1999  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  ` This method returns the arccosine, or inverse cosine, of a number.   ` The arccosine is the angle whose cosine is number.   ` The returned angle is given in radians in the range 0 (zero) to pi.  ` If x = Cos(a) then a = ArcCosinus(x)  ` Syntax  ` MTH_TRI_ArcCosine (Number)  `  ` Number  must be from-1 to 1.  `  ` Remark : to express the arccosine in degrees, multiply the result by 180/PI( ) or use the DEGREES function.  ` ---------------------------------------------  ` MATHERROR  `  0 -> No error  ` -1 -> Number out of range [-1,+1]  ` ---------------------------------------------  ` WARNING : this method needs a 4D version using constants.  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  ` Rappels mathématiques :  ` Si x = Cos(a) alors a = ArcCosinus(x)  ` ---------------------------------------------  ` MATH_ArcCosinus (Nombre) -> Numérique  ` Nombre (Numérique) Nombre dont il faut calculer l'arccosinus  ` résultat (Numérique) Angle  ` ---------------------------------------------  ` MATHERROR  `  0 -> Pas d'erreur  ` -1 -> Nombre est en dehors du domaine de définition [-1,+1]  ` ---------------------------------------------  ` ATTENTION : cette méthode nécessite une version de 4D utilisant les constantes  ` ---------------------------------------------  `  (translation : BE 03-2010)End if C_LONGINT(MATHERROR)C_REAL($1)  `Nombre dont il faut calculer l'arccosinusC_REAL($0)  `résultat du calcul $0:=0If (False)C_REAL(MTH_TRI_ArcCosine ;$0)C_REAL(MTH_TRI_ArcCosine ;$1)End if   ` Traitement des erreursCase of : (Abs($1)>1)MATHERROR:=-1Else MATHERROR:=0End case   ` AlgorithmeIf (MATHERROR=0)Case of : ($1=0)  ` évitons une division par zéro$0:=Pi /2: ($1<0)If (Pi >4)  ` Correction d'un bug 4D sur la valeur de Pi dans certaines conditions.$0:=3,1415928-Arctan(Square root(1-($1^2))/Abs($1))Else $0:=Pi -Arctan(Square root(1-($1^2))/Abs($1))End if : ($1>0)$0:=Arctan(Square root(1-($1^2))/$1)End case End if 