If (False)  ` MATH_SPL3 [Marc DUC-JACQUET 15/10/05]  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  ` Rappel mathématique :  ` On considère N valeurs Y[1], ...   Y[N]  associées  ` à N  abscisses équidistantes X[1], X[2], ...   X[N]   ` X[i]= a+ (b-a)*(i-1)/(N-1)  i=1,2,  N  ` Une fonction spline cubique S(X) est une fonction représentée par un polynôme  ` de degré inférieur ou égal à 3 sur chacun des intervalles (X[I], X[I+1])  ` i=1 à N-1, ces polynômes se raccordant aux abscisses X[I] de manière  ` à ce que S(X)  soit une fonction continue à dérivée seconde continue qui  ` interpole les données:  S(X [I]) = Y[I]  I=1,2,..., N  ` et vérifiant (pour assurer l'unicité): S"(X[1])=S"(X[N])=0  ` (S(X) peut ainsi être représentée  par une droite sur (-INFINI, X[1])  ` et sur (X[N],+INFINI)  ` S(X) représente approximativement la position d'équilibre d'une latte mince  ` astreinte à passer par les points    ( X[I], Y[I]  ) i=1,2,.... N  ` ( minimisation de l'énergie de flexion)  ` Si les  Y[I] sont les valeurs d'une fonction F:  ` Y[I] = F(X[I])  I=1,2,... ,N  ` on dit que S est la spline d'interpolation de F de degré 3 sur les X[I]  ` ---------------------------------------------  ` MATH_SPL3(N;A;B;->Y;->DY;{;T})  `  la taille du problème: nombre d'abscisses =taille tableau(X)  ` X tableau des abscisses (noeuds de x1 à xn): donné  ` Y tableau des ordonnées (de y1 à yn) : donné  ` DY tableau des dérivées premières de la spline aux noeuds: calculé  ` ces  tableaux sont  passés à la méthode via des pointeurs.  ` Dans ce cas, MATH_SPL3 retourne 0.  ` si on passe le paramètre 6 (un réel T)  `la fonction MATH_SPL3 retourne alors la valeur de s en T  $0=s(T)  ` ---------------------------------------------  ` MATHERROR  ` -1-> les  conditions N>=5  ou A<B  ne sont pas toutes deux vérifiées  `-----------------------------------------  `  ` cf  "Bibliothèque BANG  PJ.Laurent"`   ` l'appel de la méthode avec avec 6 paramètres suppose que l'on ait  ` au préalable appelé la méthode avec 5 paramètres  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  ` Math's summary :  ` We consider N values Y[1], ...   Y[N]  associated  ` to N  equidistant abscissas  X[1], X[2], ...   X[N]   ` X[i]= a+ (b-a)*(i-1)/(N-1)  i=1,2,  N  ` A cubic spline function S(X) is a function represented by a polynomial  ` of degree less or equal to 3 on each of intervals (X[I], X[I+1])  ` i=1 to N-1, those polynomials bound to abscissas X[I] for S(X) to be a continuous  ` function with continuous second-derivative that interpolates data : S(X [I]) = Y[I]  I=1,2,..., N  ` and verify (for unicity) : S"(X[1])=S"(X[N])=0  ` S(X) can be represented by a line on (-infinity,X[1]) and on (X[N], +infinity)  ` S(X) can be taken as the balance position of a thin blade force to join the points    ` ( X[I], Y[I]  ) i=1,2,.... N  ` (like minimization of bending strength)  ` If Y[I] are values of a function F :  ` Y[I] = F(X[I])  I=1,2,... ,N  ` so S is said as the spline of F interpolation of degree 3 on X[I]  ` ---------------------------------------------  ` MATH_SPL3(N;A;B;->Y;->DY;{;T})  ` number of abscissas = size of array X  ` X abscissas array (nodes from x1 to xn) : given  ` Y ordinates array (from y1 to yn) : given  ` DY first derivates of the spline : calculated  ` those array must be pointers  ` so MATH_SPL3 returns 0  ` If the 6th param is given, MATH_SPL3 returns S value in T  ` $0=s(T)  ` ---------------------------------------------  ` MATHERROR  ` -1->conditions N>=5  or A<B  are not verified  `-----------------------------------------  `  ` cf  "Bibliothèque BANG  PJ.Laurent"  ` calling the method with 6 params supposed having called the method with 5 params before  ` ------------------------------------------------------End if C_LONGINT(MATHERROR)C_POINTER($4;$5)C_INTEGER($1;$n;$indic)C_REAL($a;$b;$2;$3;$0)$n:=$1$a:=$2$b:=$3$0:=0Case of : (Count parameters=5)  `calcul du tableau des tableaux des dérivées  ` de la spline sur les noeuds  `variables localesC_INTEGER($i)C_REAL($h;$r;$alfa;$beta;$k1;$k2;$k3;$k4;$k5;$P;$f1;$f2;$bn)$indic:=0If ($n<5) | ($b<=$a)$indic:=-1End if If (Count parameters=6)If ($6>$3) | ($6<$2)$indic:=-1End if End if If ($indic=0)  `calcul possible$h:=($b-$a)/($n-1)$r:=Square root(3)$alfa:=-(2*$r+3)/108$beta:=-$r/108$k1:=-51*$alfa-(123*$beta)+3$k2:=150*$alfa+(132*$beta)-3$k3:=-162*$alfa$k4:=78*$alfa-(12*$beta)$k5:=-15*$alfa+(3*$beta)$p:=2-$r$f1:=-$p$f2:=3*$p/$h  `calcul des dérivées$5->{1}:=-(($k1*$4->{1})+($k2*$4->{2})+($k3*$4->{3})+($k4*$4->{4})+($k5*$4->{5}))*$p/$hFor ($i;1;$n-2)$5->{$i+1}:=($f1*$5->{$i})+($f2*($4->{$i+2}-$4->{$i}))End for $bn:=(($k1*$4->{$n})+($k2*$4->{$n-1})+($k3*$4->{$n-2})+($k4*$4->{$n-3})+($k5*$4->{$n-4}))/$h$5->{$n}:=($bn-$5->{$n-1})/2/$rFor ($i;$n-1;1;-1)$5->{$i}:=$5->{$i}-($p*$5->{$i+1})End for End if : (Count parameters=6)C_INTEGER($i;$n)C_REAL($t;$a;$b;$h;$ti;$mi;$alfa;$beta)$n:=$1$a:=$2$b:=$3$t:=$6$h:=($b-$a)/($n-1)$i:=Int($t-$a/$h)+1$ti:=$a+(($i-1)*$h)$mi:=($4->{$i+1}-$4->{$i})/$h$alfa:=($mi-$5->{$i})/$h$beta:=($5->{$i+1}-(2*$mi)+$5->{$i})/$h$0:=(($beta*($t-$ti-$h)+$alfa)*($t-$ti)+$5->{$i})*($t-$ti)+$4->{$i}End case 