  `This method is part from Math4D project 2002-2010 with authors : Jacques Bossy, Philip Burns, Olivier Deschanels, Marc Duc-Jacquet  `Bernard Escaich, Antoine Galmiche, Micaël Germann, George F. Huhn, Nicolas Jore, Teddy Linet, Frédéric Quoirez, Michel Saiz, Robert Van Loo  If (False)  ` MTH_NBR_NombreEnLettres (was MTH_NBR_NombreEnLettres) was MATH_NombreEnLettres   ` Version 1 : [Jacques Bossy & Bernard Escaich 2/12/98, 1/10/02]  ` Elément du projet FTK4D  ` Version 2 : [Joseph Goniak, Jacques Bossy & Bernard Escaich 12/2008]  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  `This method:  `- converts the real number passed as parameter in a number of letters,  `- takes account of the Unit (if set), Sub-Unit  `- if the plural forms are not passed as a parameter, they are deducted from the singular by adding an 's'  `- automatically determines the decimal  `- rounds the decimal part to the number of decimal places indicated in the parameter.    ` ---------------------------------------------  ` MTH_NBR_NombreEnLettres (Nombre; Unité; Sous-Unité; Décimales;  ` UnitéPluriel; Sous-unitéPluriel) -> TexteRésultat  ` ------------------------------------------------------  ` MATHERROR  `   0 -> No error  ` -1 -> No parameter  ` -2 -> Type of $1 not conform  ` -3 -> Type of $2 not conform  ` -4 -> Type of $3 not conform  ` -5 -> Type of $4 not conform  ` -6 -> Type of $5 not conform  ` -7 -> Type of $6 not conform  ` ---------------------------------------------  ` MATH_NombreEnLettres (Number; Unit; Sub-unit; Number of decimals;  ` Plural of unit; Plural of subunit) -> Result Text  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  `Cette méthode :  `- convertit le nombre réel passé en paramètre en un nombre en lettres,  `- tient compte de l'Unité (si elle est définie), de la sous-Unité  `- si les formes plurales ne sont pas passées en paramètre, elles sont déduites du singulier par adjonction d'un 's'  `- détermine automatiquement le séparateur décimal  `- arrondit la partie décimale au nombre de décimales indiqué dans le paramètre.  ` ---------------------------------------------  ` MTH_NBR_NombreEnLettres (Nombre; Unité; Sous-Unité; Décimales;  ` UnitéPluriel; Sous-unitéPluriel) -> TexteRésultat  ` ---------------------------------------------  ` MATHERROR  `   0 -> Pas d'erreur  ` -1 -> Pas de paramètre  ` -2 -> Type de $1 non conforme  ` -3 -> Type de $2 non conforme  ` -4 -> Type de $3 non conforme  ` -5 -> Type de $4 non conforme  ` -6 -> Type de $5 non conforme  ` -7 -> Type de $6 non conforme  ` ---------------------------------------------End if C_LONGINT(MATHERROR)MATHERROR:=0  `<NOM>MATH_NombreEnLettres</NOM>  `________________________________________________________________________________  `DESCRIPTION FONCTIONNELLE<DSC>  `Pour augmenter les possibilités, le nombre est passé sous forme texte.  `Exemple d'appel :   ` PAR_vt_Nombre_Lettres:=MATH_NombreEnLettres (PAR_vt_Nombre;PAR_va40_Unité;PAR_va40_Sous_Unité;PAR_ve_Décimales;PAR_va40_Unité_pluriel;PAR_va40_Sous_Unité_pluriel)  `Exemples de conversion  `- 123;euro => cent vingt-trois euros   `-123,22;euro =>  cent vingt-trois virgule vingt-deux euros   `-123,22;euro;centime => cent vingt-trois euros et vingt-deux centimes   ` Cas particulier des 7 paramètres :  `Cette méthode traite les centaines ; elle est appelée par la méthode de convertion des réels en texte.  ` ex-méthode : _DTBNum_fi_LittéralCents  `</DSC>  `________________________________________________________________________________  `AMELIORATIONS A APPORTER <AML>  `</AML>  `________________________________________________________________________________  `CREEE PAR JKBSY@Wanadoo.fr,   `•1• 02/12/1998     `modifiée par Bernard ESCAICH   `•2• 01/10/2002     `•3• 05/09/2007 22:37:34  <TAG>  `•4• 08/12/2008 23:42:19  Amélioration ; rendu du zéro ; grands nombres   `•5• 09/12/2008 22:43:47  Bernard : Gestion des pluriels  `•6• 09/12/2008 22:43:47  Jacques : Gestion des décimales ex : 0,1 donne bien 10 centimes (et non 1)  `•7• 10/12/2008 22:45:18  Jacques : réduction de bêtises (sic)  `•8• 11/12/2008 09:02:24  Jacques : cas du un mille (321000 donnait trois cent vingt et mille) et suppression des '.' s'il y a une ','  `•9• 16/12/2008 09:20:15  Jacques : particules, non-numériques, méthode unique, nettoyage des vieux commentaires périmés  `•10• 07/01/2009 23:00:51  Bernard : corrections de cas particuliers ; nettoyage du code  `</DAT>  `________________________________________________________________________________  `COMPOSANT <CMP>  `</CMP>  `________________________________________________________________________________  `PARAMETRES <PRM>C_TEXT($1)  `           montantC_TEXT($2)  `           Unité                                (option)C_TEXT($3)  `           Sous-Unité                     (option)C_INTEGER($4)  `         Nombre de décimales   (option)C_TEXT($5)  `           Unité au pluriel              (option)C_TEXT($6)  `           Sous-Unité au pluriel   (option)C_LONGINT($7)  `nombre en chiffres à convertir (gestion des centaines)C_TEXT($0)  `           résultat                        If (False)C_TEXT(MTH_NBR_NombreEnLettres ;$0)C_TEXT(MTH_NBR_NombreEnLettres ;$1)C_TEXT(MTH_NBR_NombreEnLettres ;$2)C_TEXT(MTH_NBR_NombreEnLettres ;$3)C_LONGINT(MTH_NBR_NombreEnLettres ;$4)C_TEXT(MTH_NBR_NombreEnLettres ;$5)C_TEXT(MTH_NBR_NombreEnLettres ;$6)C_LONGINT(MTH_NBR_NombreEnLettres ;$7)End if   `</PRM>  `________________________________________________________________________________  `TYPAGE DES VARIABLES LOCALES <TVL>C_STRING(2;$va2_Séparateur)C_STRING(40;$va40_Sous_Unité)C_BOOLEAN($vb_Erreur)C_BOOLEAN($vb_OK)C_BOOLEAN($vb_Pluriel)C_BOOLEAN($vb_Pluriel)C_BOOLEAN($vb_Unité)C_INTEGER($ve_Ascii)C_INTEGER($ve_Nombre_partie_dec)C_INTEGER($ve_Séparateur)C_LONGINT($i)C_LONGINT($vl_Centaine)C_LONGINT($vl_Decimales)C_LONGINT($vl_Dizaine)C_LONGINT($vl_Longueur)C_LONGINT($vl_Nombre_a_convertir)C_LONGINT($vl_Nombre_partie_entiere)C_LONGINT($vl_Reste)C_TEXT($vt_Erreur_Message)C_TEXT($vt_Nombre_a_convertir)C_TEXT($vt_Nombre_en_Lettres)C_TEXT($vt_Nombre_partie_dec)C_TEXT($vt_Nombre_partie_entiere)C_TEXT($vt_Nombre_partie_entiere)C_TEXT($vt_Particule)C_TEXT($vt_Reste_en_Lettres)C_TEXT($vt_Reste_partie_entiere)C_TEXT($vt_Sous_Unité)C_TEXT($vt_Sous_Unité_pluriel)C_TEXT($vt_Unité)C_TEXT($vt_Unité_pluriel)ARRAY STRING(10;$ta10_Chiffres_en_Lettres;0)  `</TVL>  `TYPAGE DES VARIABLES à reclasser dans les COMPILER_XXX <TVG> `</TVG>  `TYPAGE DES VARIABLES INTERPROCESS à reclasser <TVI> `</TVI>  `________________________________________________________________________________  `INITIALISATION DES VARIABLES LOCALES <IVL>ARRAY STRING(10;$ta10_Chiffres_en_Lettres;25)$ta10_Chiffres_en_Lettres{0}:=""$ta10_Chiffres_en_Lettres{1}:="un "$ta10_Chiffres_en_Lettres{2}:="deux "$ta10_Chiffres_en_Lettres{3}:="trois "$ta10_Chiffres_en_Lettres{4}:="quatre "$ta10_Chiffres_en_Lettres{5}:="cinq "$ta10_Chiffres_en_Lettres{6}:="six "$ta10_Chiffres_en_Lettres{7}:="sept "$ta10_Chiffres_en_Lettres{8}:="huit "$ta10_Chiffres_en_Lettres{9}:="neuf "$ta10_Chiffres_en_Lettres{10}:="dix "$ta10_Chiffres_en_Lettres{11}:="onze "$ta10_Chiffres_en_Lettres{12}:="douze "$ta10_Chiffres_en_Lettres{13}:="treize "$ta10_Chiffres_en_Lettres{14}:="quatorze "$ta10_Chiffres_en_Lettres{15}:="quinze "$ta10_Chiffres_en_Lettres{16}:="seize "$ta10_Chiffres_en_Lettres{17}:="dix-sept "$ta10_Chiffres_en_Lettres{18}:="dix-huit "$ta10_Chiffres_en_Lettres{19}:="dix-neuf "$ta10_Chiffres_en_Lettres{20}:=""$ta10_Chiffres_en_Lettres{21}:=""$ta10_Chiffres_en_Lettres{22}:="vingt "$ta10_Chiffres_en_Lettres{23}:="trente "$ta10_Chiffres_en_Lettres{24}:="quarante "$ta10_Chiffres_en_Lettres{25}:="cinquante "  `</IVL>  `________________________________________________________________________________  `INITIALISATION DES VARIABLES GLOBALES <IVG>  `</IVG>  `________________________________________________________________________________  `CONTROLE DES PARAMETRES <CPR>If (Count parameters=0)$vb_Erreur:=True$vt_Erreur_Message:="Il n'y a pas de paramètre"End if If (Not($vb_Erreur))If ((Type($1)#Is String Var ) & (Type($1)#Is Text ))$vb_Erreur:=True$vt_Erreur_Message:=$vt_Erreur_Message+(Char(13)*Num($vt_Erreur_Message#""))+"Le paramètre 1 est du type "+String(Type($1))Else $vt_Nombre_a_convertir:=$1End if End if If (Count parameters>=2) & (Not($vb_Erreur))If ((Type($2)#Is String Var ) & (Type($2)#Is Text ))$vb_Erreur:=True$vt_Erreur_Message:=$vt_Erreur_Message+(Char(13)*Num($vt_Erreur_Message#""))+"Le paramètre 2 est du type "+String(Type($2))Else $vb_Unité:=True$vt_Unité:=$2End if End if If (Count parameters>=3) & (Not($vb_Erreur))If ((Type($3)#Is String Var ) & (Type($3)#Is Text ))$vb_Erreur:=True$vt_Erreur_Message:=$vt_Erreur_Message+(Char(13)*Num($vt_Erreur_Message#""))+"Le paramètre 3 est du type "+String(Type($3))Else $vt_Sous_Unité:=$3End if End if If (Count parameters>=4) & (Not($vb_Erreur))If ((Type($4)#Is Integer ) & (Type($4)#Is LongInt ))$vb_Erreur:=True$vt_Erreur_Message:=$vt_Erreur_Message+(Char(13)*Num($vt_Erreur_Message#""))+"Le paramètre 4 est du type "+String(Type($4))Else $vl_Decimales:=$4End if End if If (Count parameters>=5) & (Not($vb_Erreur))If ((Type($5)#Is String Var ) & (Type($5)#Is Text ))$vb_Erreur:=True$vt_Erreur_Message:=$vt_Erreur_Message+(Char(13)*Num($vt_Erreur_Message#""))+"Le paramètre 5 est du type "+String(Type($5))Else $vt_Unité_pluriel:=$5End if End if If (Count parameters>=6) & (Not($vb_Erreur))If ((Type($6)#Is String Var ) & (Type($6)#Is Text ))$vb_Erreur:=True$vt_Erreur_Message:=$vt_Erreur_Message+(Char(13)*Num($vt_Erreur_Message#""))+"Le paramètre 3 est du type "+String(Type($6))Else $vt_Sous_Unité_pluriel:=$6End if End if   `</CPR>  `________________________________________________________________________________  `EXECUTION <EXE>If (Count parameters=7)  `• Centaine •$vl_Centaine:=Int($7/100)If ($vl_Centaine#0)If ($vl_Centaine=1)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+"cent"Else $vb_Pluriel:=True$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$ta10_Chiffres_en_Lettres{$vl_Centaine}+"cent"End if End if   `s ou pas s$vl_Reste:=Mod($7;100)If ($vl_Reste#0)$vb_Pluriel:=FalseEnd if $vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+("s"*Num($vb_Pluriel))+" "$vb_Pluriel:=False  `• Dizaine •If ($vl_Reste>=80)$vt_Reste_en_Lettres:=$vt_Reste_en_Lettres+"quatre-vingt"$vl_Reste:=Mod($vl_Reste;20)If ($vl_Reste=0)$vt_Reste_en_Lettres:=$vt_Reste_en_Lettres+"s "Else $vt_Reste_en_Lettres:=$vt_Reste_en_Lettres+" "End if End if If ($vl_Reste>=60)$vt_Reste_en_Lettres:=$vt_Reste_en_Lettres+"soixante "+("et "*Num(($vl_Reste=61) | ($vl_Reste=71)))$vl_Reste:=Mod($vl_Reste;20)End if If ($vl_Reste>=20)$vl_Dizaine:=Int($vl_Reste/10)$vt_Reste_en_Lettres:=$vt_Reste_en_Lettres+$ta10_Chiffres_en_Lettres{20+$vl_Dizaine}+("et "*Num(Mod($vl_Reste;10)=1))$vl_Reste:=Mod($vl_Reste;10)End if $vt_Reste_en_Lettres:=$vt_Reste_en_Lettres+$ta10_Chiffres_en_Lettres{$vl_Reste}  `mettre des tirets pour les nombres inférieurs à 100If (Count parameters>=2) & (Position("et";$vt_Reste_en_Lettres)<=0)$vt_Reste_en_Lettres:=Replace string($vt_Reste_en_Lettres;" ";"-")$vt_Reste_en_Lettres:=Substring($vt_Reste_en_Lettres;1;Length($vt_Reste_en_Lettres)-1)+" "End if $vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Reste_en_Lettres$0:=$vt_Nombre_en_LettresIf ($0=" ") | ($0="  ")$0:=""End if Else If (Not($vb_Erreur))  `•• Prétraitement ••  ` définition de la pariculeCase of : ($vt_Unité="")$vt_Particule:="": (Position($vt_Unité≤1≥;"aeiou")>0)$vt_Particule:="d'"Else $vt_Particule:="de "End case   `• Traiter le signe •  If (Position("-";$vt_Nombre_a_convertir)=1) | ((Position("-";$vt_Nombre_a_convertir)=Length($vt_Nombre_a_convertir))) & (Length($vt_Nombre_a_convertir)>0)  `signe - au début ou à la fin$vt_Nombre_en_Lettres:="moins"$vt_Nombre_a_convertir:=Replace string($vt_Nombre_a_convertir;"-";"")End if   `Elimination des non-numériquesFor ($i;Length($vt_Nombre_a_convertir);1;-1)If (Position($vt_Nombre_a_convertir≤$i≥;"0123456789,.-")<1)$vt_Nombre_a_convertir:=Substring($vt_Nombre_a_convertir;1;$i-1)+Substring($vt_Nombre_a_convertir;$i+1)End if End for   `• Recherche du séparateur décimal •  For ($i;Length($vt_Nombre_a_convertir);1;-1)$ve_Ascii:=Character code($vt_Nombre_a_convertir≤$i≥)Case of : (($ve_Ascii=44) | ($ve_Ascii=46)) & ($va2_Séparateur="")$va2_Séparateur:=$vt_Nombre_a_convertir≤$i≥  `48 à 57 OKEnd case End for If (Position(",";$vt_Nombre_a_convertir)>0)  ` s'il y a une virgule, on enlève tous les points$vt_Nombre_a_convertir:=Replace string($vt_Nombre_a_convertir;".";"")End if   `• Séparation partie entière et partie décimale •  $ve_Séparateur:=Position(",";$vt_Nombre_a_convertir)If ($ve_Séparateur<=0) & ($ve_Séparateur<Position(".";$vt_Nombre_a_convertir))$ve_Séparateur:=Position(".";$vt_Nombre_a_convertir)End if If ($ve_Séparateur>=1)$vt_Nombre_partie_dec:=Substring($vt_Nombre_a_convertir;$ve_Séparateur+1)If ($vl_Decimales>0)$vt_Nombre_partie_dec:=$vt_Nombre_partie_dec+(($vl_Decimales-Length($vt_Nombre_partie_dec))*"0")End if $vt_Nombre_partie_entiere:=Substring($vt_Nombre_a_convertir;1;$ve_Séparateur-1)If ($vt_Nombre_partie_entiere="")  `Si le nombre est écrit ",36523  (le zéro avant la virgule peut être omis)   $vt_Nombre_partie_entiere:="0"End if Else $vt_Nombre_partie_dec:=""$vt_Nombre_partie_entiere:=$vt_Nombre_a_convertirEnd if   `• Arrondir les décimales •  If ($vl_Decimales>=0)  `arrondir au nombre de décimales prescrit   $vt_Nombre_partie_dec:=Substring($vt_Nombre_partie_dec;1;$vl_Decimales)  `S'il n'y a que des zéros, simplifier ; détecter le dernier chiffre significatifFor ($i;Length($vt_Nombre_partie_dec);1;-1)If ($vt_Nombre_partie_dec≤$i≥#"0")$vl_Longueur:=$i$i:=0End if End for If ($vl_Longueur>0)$vt_Nombre_partie_dec:=Substring($vt_Nombre_partie_dec;1;$vl_Longueur)Else $vt_Nombre_partie_dec:=""End if Else   `ne pas retraiter les décimales    End if   `•• Traitement partie entière par tranche de 3 chiffres ••$vb_Pluriel:=FalseIf ($vt_Nombre_partie_entiere#"0")$vt_Reste_partie_entiere:=$vt_Nombre_partie_entiere  `initialisation  `•Quadrillions •If (Length($vt_Reste_partie_entiere)>=25)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;(Length($vt_Reste_partie_entiere)-24)))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"quadrillion"+("s"*Num($vl_Nombre_a_convertir>=2))+" "End if $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-23)  `resteIf (($vt_Reste_partie_entiere=(24*"0")) & (($vt_Sous_Unité#"") | ($vt_Nombre_partie_dec="")))$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Particule$vt_Reste_partie_entiere:=""End if End if   `• Trilliards •If (Length($vt_Reste_partie_entiere)>=22)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;(Length($vt_Reste_partie_entiere)-21)))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"trilliard"+("s"*Num($vl_Nombre_a_convertir>=2))+" "End if $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-20)  `resteIf (($vt_Reste_partie_entiere=(21*"0")) & (($vt_Sous_Unité#"") | ($vt_Nombre_partie_dec="")))$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Particule$vt_Reste_partie_entiere:=""End if End if   `•Trillions •If (Length($vt_Reste_partie_entiere)>=19)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;(Length($vt_Reste_partie_entiere)-18)))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"trillion"+("s"*Num($vl_Nombre_a_convertir>=2))+" "End if $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-17)  `resteIf (($vt_Reste_partie_entiere=(18*"0")) & (($vt_Sous_Unité#"") | ($vt_Nombre_partie_dec="")))$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Particule$vt_Reste_partie_entiere:=""End if End if   `• Billiards •If (Length($vt_Reste_partie_entiere)>=16)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;(Length($vt_Reste_partie_entiere)-15)))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"billiard"+("s"*Num($vl_Nombre_a_convertir>=2))+" "End if $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-14)  `resteIf (($vt_Reste_partie_entiere=(15*"0")) & (($vt_Sous_Unité#"") | ($vt_Nombre_partie_dec="")))$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Particule$vt_Reste_partie_entiere:=""End if End if   `• Billions •If (Length($vt_Reste_partie_entiere)>=13)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;(Length($vt_Reste_partie_entiere)-12)))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"billion"+("s"*Num($vl_Nombre_a_convertir>=2))+" "End if $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-11)  `resteIf (($vt_Reste_partie_entiere=(12*"0")) & (($vt_Sous_Unité#"") | ($vt_Nombre_partie_dec="")))$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Particule$vt_Reste_partie_entiere:=""End if End if   `• Milliards •If (Length($vt_Reste_partie_entiere)>=10)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;(Length($vt_Reste_partie_entiere)-9)))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"milliard"+("s"*Num($vl_Nombre_a_convertir>=2))+" "End if $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-8)  `resteIf (($vt_Reste_partie_entiere=(9*"0")) & (($vt_Sous_Unité#"") | ($vt_Nombre_partie_dec="")))$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Particule$vt_Reste_partie_entiere:=""End if End if   `• Millions •  If (Length($vt_Reste_partie_entiere)>=7)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;Length($vt_Reste_partie_entiere)-6))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"million"+("s"*Num($vl_Nombre_a_convertir>=2))+" "End if $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-5)  `resteIf (($vt_Reste_partie_entiere=(6*"0")) & (($vt_Sous_Unité#"") | ($vt_Nombre_partie_dec="")))$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+$vt_Particule$vt_Reste_partie_entiere:=""End if End if   `• Milliers •If (Length($vt_Reste_partie_entiere)>=4)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1;Length($vt_Reste_partie_entiere)-3))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=1)Case of : ($vl_Nombre_a_convertir=1)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+" mille ": ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)+"mille "End case $vt_Reste_partie_entiere:=Substring($vt_Reste_partie_entiere;Length($vt_Reste_partie_entiere)-2)  `resteEnd if End if   `•• Unités ••If (Length($vt_Reste_partie_entiere)>=1)$vl_Nombre_a_convertir:=Num(Substring($vt_Reste_partie_entiere;1))$vb_Pluriel:=$vb_Pluriel | ($vl_Nombre_a_convertir>=2)If ($vl_Nombre_a_convertir>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ("";"";"";0;"";"";$vl_Nombre_a_convertir)End if End if Case of : ($vt_Nombre_en_Lettres="") & ($vt_Unité#"") & ($va40_Sous_Unité="")$vt_Nombre_en_Lettres:="zéro ": ($vt_Nombre_en_Lettres="") & ($vt_Unité#"")$vt_Nombre_en_Lettres:="": ($vt_Nombre_en_Lettres#"")  `ne rien faire      Else $vt_Nombre_en_Lettres:="zéro "End case   `suppression d'un espace initiale   ??If ((Substring($vt_Nombre_en_Lettres;1;1)=" ") & (Length($vt_Nombre_en_Lettres)>2))$vt_Nombre_en_Lettres:=Substring($vt_Nombre_en_Lettres;2;Length($vt_Nombre_en_Lettres)-1)End if   `•• Unité ••    Case of : ($vt_Unité#"") & ($vt_Sous_Unité#"")If ($vb_Pluriel)  `  plurielIf ($vt_Unité_pluriel="")  ` s'il n'y a pas d'unité au pluriel alors singulier + 's'$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+(($vt_Unité+"s")*Num($vt_Nombre_en_Lettres#""))+" "Else $vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+($vt_Unité_pluriel*Num($vt_Nombre_en_Lettres#""))+" "End if Else   `  singulier$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+($vt_Unité*Num($vt_Nombre_en_Lettres#""))+" "End if Else   `s'il n'y a  pas de sous-Unité, l'Unité est reportée à la fin    End case   `•• Liaison ••Case of : ($vt_Unité="") & ($vt_Sous_Unité="") & (Num($vt_Nombre_partie_dec)>0)  `nombre seul      $vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+"virgule ": (($vt_Unité="") | ($vt_Sous_Unité="")) & (Num($vt_Nombre_partie_dec)>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+"virgule ": ($vt_Nombre_en_Lettres#"") & ($vt_Nombre_en_Lettres#" ") & ($vt_Unité#"") & ($vt_Sous_Unité#"") & (Num($vt_Nombre_partie_dec)>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+"et "Else   `rien      End case   `•• Décimales ••If ($vt_Nombre_partie_dec#"") & ($vt_Sous_Unité="")For ($i;1;Length($vt_Nombre_partie_dec))If (($vt_Nombre_partie_dec≤$i≥)="0")$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+"zéro "Else $i:=1000End if End for End if If (Num($vt_Nombre_partie_dec)>0)$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+MTH_NBR_NombreEnLettres ($vt_Nombre_partie_dec;$vt_Sous_Unité;"";0;$vt_Sous_Unité_pluriel)End if   `•• Unité bis ••    Case of : ($vt_Unité#"") & ($vt_Sous_Unité#"")  `rien      : ($vt_Unité#"") & ($vt_Sous_Unité="")If ($vb_Pluriel)  `  plurielIf ($vt_Unité_pluriel="")  ` s'il n'y a pas d'unité au pluriel alors singulier + 's'$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+(($vt_Unité+"s")*Num($vt_Nombre_en_Lettres#""))+" "Else $vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+($vt_Unité_pluriel*Num($vt_Nombre_en_Lettres#""))+" "End if Else   `  singulier$vt_Nombre_en_Lettres:=$vt_Nombre_en_Lettres+($vt_Unité*Num($vt_Nombre_en_Lettres#""))+" "End if Else   `s'il n'y a  pas de sous-Unité, l'Unité est reportée à la fin    End case   `nettoyage de la chaine finale$vt_Nombre_en_Lettres:=Replace string($vt_Nombre_en_Lettres;"  ";" ")  `remplacer sous chaine par indice ???If ((Substring($vt_Nombre_en_Lettres;1;1)=" ") & (Length($vt_Nombre_en_Lettres)>2))$vt_Nombre_en_Lettres:=Substring($vt_Nombre_en_Lettres;2;Length($vt_Nombre_en_Lettres)-1)End if $0:=$vt_Nombre_en_LettresEnd if End if 