If (False)  //MATH_LogGamma  //Auteur : Teddy LINET 02/2003 et Philip BURNS 1985  //Date :   // ------------------------------------------------------  // ---------------   F R A N C A I S  ---------------  // ------------------------------------------------------  // Rappels mathématiques :  // Logarithme népérien de la fonction Gamma (cf MATH_IntegralGammaIncomp)  //  // Remarque : Utilise les approximations polynomiales minimax  // sur les intervalles  [-inf,0], [0,.5], [.5,1.5], [1.5,4.0]  // [4.0,12.0], [12.0,+inf].  // Références   // - Hart et al., "Computer Approximations",  Wiley(1968), p. 130F  // - Cody and Hillstrom, "Chebyshev approximations for the natural   // logarithm of the Gamma function", Mathematics of Computation,  //  21, April, 1967, P. 198F.  // ---------------------------------------------  // Ecriture :  // MATH_LogGamma($vArgument_F)  // $vArgument_F : parametre de distribution  // $0 : Valeur du logarithme       // ---------------------------------------------    // MATHERROR  // 0 -> Pas d'erreur  // ------------------------------------------------------  // ---------------   E N G L I S H   -----------------  // ------------------------------------------------------  // Math's summary :  // Natural logarithm of Gamma function (cf MATH_IntegralGammaIncomp)  //  // Notice : Uses minimax polynomial approximations on intervals  [-inf,0], [0,.5], [.5,1.5], [1.5,4.0]  // [4.0,12.0], [12.0,+inf].  // References   // - Hart et al., "Computer Approximations",  Wiley(1968), p. 130F  // - Cody and Hillstrom, "Chebyshev approximations for the natural logarithm of the Gamma function",   // Mathematics of Computation, 21, April, 1967, P. 198F.  // ---------------------------------------------  // Ecriture :  // MATH_LogGamma($vArgument_F)  // $vArgument_F : distribution parameter  // $0 : logarithm value  // ---------------------------------------------    // MATHERROR  // 0 -> No error  // ------------------------------------------------------  //  (translation : BE 03-2010)End if   //@SVN_Folder: MATH_/C_REAL($1;$vArg_F;$0)$vArg_F:=$1  // ConstantesC_REAL($vRmax_F;$vRinf_F;$vZeta_F)$vXln2sp_F:=0,9189385332046720000  // Log(racine carree(2 * PI))$vRmax_F:=10^300  // Valeur maximale raisonable de calcul de Math_LogGamma$vRinf_F:=10^300  // Plus grand nombre à virgule flottante (infini de la machine)$vZeta_F:=10^-16  // Evaluation de la précision de la machineC_REAL($vRarg_F;$vAlinc_F;$vScale_F)C_REAL($vTop_F;$vBot_F;$vFrac_F)C_REAL($vAlgval_F)C_LONGINT($i_I;$vIof_I)C_LONGINT($vIlo_I;$vIhi_I)C_BOOLEAN($vQminus_B;$vQdoit_B)ARRAY REAL($tP_F;29)$tP_F{1}:=4,120843185847700000  // 4,12084318584770E+00 ,$tP_F{2}:=85,68982062831320000  //   8,56898206283132E+01 ,$tP_F{3}:=243,1752435244210000  //   2,43175243524421E+02 ,$tP_F{4}:=-261,7218583856120000  //  -2,61721858385614E+02 ,$tP_F{5}:=-922,2613728801520000  //  -9,22261372880152E+02 ,$tP_F{6}:=-517,6383498023210000  //  -5,17638349802321E+02 ,$tP_F{7}:=-77,41064071333  //  -7,74106407133295E+01 ,$tP_F{8}:=-2,208843997216180000  //  -2,20884399721618E+00 ,$tP_F{9}:=5,155057617640820000  //   5,15505761764082E+00 ,$tP_F{10}:=377,5106797972170000  //   3,77510679797217E+02 ,$tP_F{11}:=5268,983255915  //   5,26898325591498E+03 ,$tP_F{12}:=19553,60554063  //   1,95536055406304E+04 ,$tP_F{13}:=12043,17380987160000  //   1,20431738098716E+04 ,$tP_F{14}:=-20648,29420532530000  //  -2,06482942053253E+04 ,$tP_F{15}:=-15086,30228766720000  //  -1,50863022876672E+04 ,$tP_F{16}:=-1513,831834115  //  -1,51383183411507E+03 ,$tP_F{17}:=-10377,01651733  //  -1,03770165173298E+04 ,$tP_F{18}:=-982710,2281420500000  //  -9,82710228142049E+05 ,$tP_F{19}:=-19718301,15861  //  -1,97183011586092E+07 ,$tP_F{20}:=-87316754,38238390000  //  -8,73167543823839E+07 ,$tP_F{21}:=111938535,4299860000  //   1,11938535429986E+08 ,$tP_F{22}:=481807710,2773630000  //   4,81807710277363E+08 ,$tP_F{23}:=-244832176,9032880000  //  -2,44832176903288E+08 ,$tP_F{24}:=-240798698,0173370000  //  -2,40798698017337E+08 ,$tP_F{25}:=8,065880899*0,0001  //   8,06588089900001E-04 ,$tP_F{26}:=-5,949973108889*0,0001  //  -5,94997310888900E-04 ,$tP_F{27}:=7,936500675428*0,0001  //   7,93650067542790E-04 ,$tP_F{28}:=-2,777777776882*0,001  //  -2,77777777688189E-03 ,$tP_F{29}:=8,333333333333300000*0,01  //   8,33333333333330E-02   );ARRAY REAL($vQ_F;24)$vQ_F{1}:=1  //  1,00000000000000E+00 ,$vQ_F{2}:=45,64677187586  //   4,56467718758591E+01 ,$vQ_F{3}:=377,8372484824  //   3,77837248482394E+02 ,$vQ_F{4}:=951,3235976797  //   9,51323597679706E+02 ,$vQ_F{5}:=846,0755362020780000  //   8,46075536202078E+02 ,$vQ_F{6}:=262,3083470269460000  //   2,62308347026946E+02 ,$vQ_F{7}:=24,43519662506310000  //   2,44351966250631E+01 ,$vQ_F{8}:=4,097792921092620000*0,1  //   4,09779292109262E-01 ,$vQ_F{9}:=1  //   1,00000000000000E+00 ,$vQ_F{10}:=128,9093189013  //   1,28909318901296E+02 ,$vQ_F{11}:=3039,903041439430000  //   3,03990304143943E+03 ,$vQ_F{12}:=22029,56214415660000  //   2,20295621441566E+04 ,$vQ_F{13}:=57120,25539602500000  //   5,71202553960250E+04 ,$vQ_F{14}:=52622,86383841200000  //   5,26228638384119E+04 ,$vQ_F{15}:=14402,0903717  //   1,44020903717009E+04 ,$vQ_F{16}:=698,3274140573510000  //   6,98327414057351E+02 ,$vQ_F{17}:=1  //   1,00000000000000E+00 ,$vQ_F{18}:=-2015,275195500480000  //  -2,01527519550048E+03 ,$vQ_F{19}:=-311406,2847340670000  //  -3,11406284734067E+05 ,$vQ_F{20}:=-10485775,8305  //  -1,04857758304994E+07 ,$vQ_F{21}:=-111925411,6263320000  //  -1,11925411626332E+08 ,$vQ_F{22}:=-404435928,2914360000  //  -4,04435928291436E+08 ,$vQ_F{23}:=-435370714,8043720000  //  -4,35370714804374E+08 ,$vQ_F{24}:=-79026111,14187610000  //  -7,90261111418763E+07   )  //$vAlgval_F:=$vRinf_F$vScale_F:=1$vAlinc_F:=0$vFrac_F:=0$vRarg_F:=$vArg_F$vIof_I:=1$vQminus_B:=False$vQdoit_B:=True  //   S'ajuste si l'argument est négatifIf ($vRarg_F<0)$vQminus_B:=True$vRarg_F:=-$vRarg_F$vTop_F:=Int($vRarg_F)$vBot_F:=1If ((Int($vTop_F/2)*2)=0)$vBot_F:=-1End if $vTop_F:=$vRarg_F-$vTop_FIf ($vTop_F=0)$vQdoit_B:=FalseElse $vFrac_F:=($vBot_F*Pi)/(Sin($vTop_F*Pi))$vRarg_F:=$vRarg_F+1$vFrac_F:=Log(Abs($vFrac_F))End if End if   //   Choisi un intervale d'approximation en fonction de l'argumentCase of : ($vRarg_F=0)$vQdoit_B:=False: ($vRarg_F<=0,5)$vAlinc_F:=-Log($vRarg_F)$vScale_F:=$vRarg_F$vRarg_F:=$vRarg_F+1If ($vScale_F<$vZeta_F)$vAlgval_F:=$vAlinc_F$vQdoit_B:=FalseEnd if : ($vRarg_F<=1,5)$vScale_F:=$vRarg_F-1: ($vRarg_F<=4)$vScale_F:=$vRarg_F-2$vIof_I:=9: ($vRarg_F<=12)$vIof_I:=17: ($vRarg_F<=$vRmax_F)$vAlinc_F:=(($vRarg_F-0,5)*Log($vRarg_F))-$vRarg_F+$vXln2sp_F$vScale_F:=1/$vRarg_F$vRarg_F:=$vScale_F*$vScale_F$vTop_F:=$tP_F{25}For ($i_I;26;29)$vTop_F:=($vTop_F*$vRarg_F)+$tP_F{$i_I}End for $vAlgval_F:=($vScale_F*$vTop_F)+$vAlinc_F$vQdoit_B:=FalseEnd case   // Evaluation pour $vArg_F <= 12 par la méthode d'Horner  // semblant plus précise que les fractions continues  //If ($vQdoit_B)$vIlo_I:=$vIof_I+1$vIhi_I:=$vIof_I+7$vTop_F:=$tP_F{$vIof_I}$vBot_F:=$vQ_F{$vIof_I}For ($i_I;$vIlo_I;$vIhi_I)$vTop_F:=($vTop_F*$vRarg_F)+$tP_F{$i_I}$vBot_F:=($vBot_F*$vRarg_F)+$vQ_F{$i_I}End for $vAlgval_F:=($vScale_F*($vTop_F/$vBot_F))+$vAlinc_FEnd if   //If ($vQminus_B)$vAlgval_F:=$vFrac_F-$vAlgval_FEnd if $0:=$vAlgval_F