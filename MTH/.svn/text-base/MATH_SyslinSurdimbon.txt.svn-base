C_POINTER($1;$2;$3)C_INTEGER($4;$5;$0)C_REAL($6)  `Est-ce la bonne version de MATH_SyslinSurdim ?  `Double ?If (False)  ` MATH_SyslinSurdim [Marc DUC-JACQUET 20/01/2003]  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  ` Source: Bibliothèque d'Analyse Numérique de Grenoble (BANG)  ` dont l'élaboration est un travail d'équipe auquel l'auteur a participé  ` ---------------------------------------------  ` Rappels mathématiques :      ` Un système linéaire de M équations à N+1 inconnues s'écrit:  `                  A01.X0 + A11.X1 +  ...        +   AN1.XN = B1     `                  A02.X0 + A12.X1  + ...        +   AN2.XN = B2   `                  A03.X0 + A13.X1 + ...         +   AN3.XN = B3  `                 . . .  `                 . . .  `                  A0M.X0 + A1M.X1 + ...        +   ANM.XN = BM  ` où   M>=N+1  (plus d'équations que d'inconnues, cad plus de lignes  ` que de colonnes (on dit que le système est sur-dimensionné)  ` les AIJ , I=0 à N, J=1 à M  (appelés coefficients du système )  ` et les BI , I=1 à M  ( appelés seconds membres car à droite du   ` signe = ) sont connus ( c'est à dire donnés)  ` X0,X1, ... XN sont  les N+1  inconnues   `  RESOUDRE  ce système linéaire c'est  chercher les valeurs des inconnues  ` X0,X1, ... XN  qui satisfont au mieux les M équations.  ` Si on prend le parti de chercher les valeurs des X0,X1, .... XN  ` pour lesquelles la somme des carrés des écarts  ` Somme [ Bi - (A0i X0+A1i X1+  ... +  ANi XN)] ^2  (somme pour i=1,2,  M)  ` est minimum, on dit que l'on résoud le système linéaire initial,   ` au sens des MOINDRES CARRES  ` Nous conviendrons que l'ensemble des données ( les coefficients AIJ    ` sont rangés dans le tableau bidimensionnel A)  `                  |   A01         A11       ....   AN1    |  `                  |   A02         A12        ....   AN2   |  `     A=         |   A03         A13        ....   AN3   |  `                  |         ....                                                  `                  |   A0M         A1M       ....   ANM  |  ` ce tableau à M lignes et N+1 colonnes, devra être déclaré dans 4D comme  ` TABLEAU REEL  A {M} {N}    ` Mathématiquement A est une matrice à M lignes et N+1 colonnes  ` Le second membre est représenté par le tableau unidimensionel B  `                  |   B1  |  `                  |   B2  |  `     B=         |   B3  |  `                  |   ....                                                  `                  |   BM |  ` matrice à M   lignes et 1 colonne.  ` La théorie mathématique montre que si on note  `                  |   X0  |  `                  |   X1  |  `     X=         |   ....   `                  |   XN |                                                ` X vecteur de dimension N+1, la solution du problème est obtenue en  ` résolvant  au sens ordinaire le système de N+1 équations à  N+1 inconnues suivante  `  tr(A)AX = tr(A)B    ` où tr(A) est la matrice TRANSPOSEE de la matrice A   ` (tr(A) est obtenue à partir de A en échangeant les lignes et les colonnes)  ` ---------------------------------------------  ` MATHERROR:= MATH_SyslinSurDim(->A;-> B;-> X;N; M; EPSILON)  ` le premier paramètre est un pointeur sur le tableau bidimensionnel A dim(M;N)  ` le second paramètre est un pointeur sur le tableau  unidimensionnel B dim (M)  ` le troisième paramètre est un pointeur sur le tableau  unidimensionnel X dim (N+1)  ` X contient en sortie la solution  ` M représente donc le nombre d'équations  ` N+1  représente le nombre d'inconnues  ` EPSILON numérique   ` ---------------------------------------------  ` MATHERROR (valeur renvoyée par la méthode)  `   0 -> La méthode a été conduite à son terme  ` +1 -> La méthode est avortée  ` On arrête en effet les calculs si la somme des carrés des éléments   ` d'une ligne de A est inférieure à la constante EPSILON  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  ` Source: Numeris analysis library of Grenoble (BANG)  ` that has bee elaborated by a team with participation of author.  ` ------------------------------------------------------  ` Math's summary  ` A linear system with M equations with N+1 unknowns can be written as :  `                  A01.X0 + A11.X1 +  ...        +   AN1.XN = B1     `                  A02.X0 + A12.X1  + ...        +   AN2.XN = B2   `                  A03.X0 + A13.X1 + ...         +   AN3.XN = B3. . .  `                  A0M.X0 + A1M.X1 + ...        +   ANM.XN = BM  ` where M>N+1 : more equations than unknowns, more rows than columns  ` that system is said oversize  ` AIJ, I=0 to N, J=1 to M (system's coefficients)  ` and BI, I+1 to M (called second members cause at the right side of '=')  ` are known.  ` X0, X1, ... XN are the N+1 unknowns  ` Solve this linear system is seeking the unknown values X0, X1, ..., XN   ` as good as possible for the M equations.  ` If we try to find the values of X0, X1 etc. for those the sums of the eviations squares :  ` Sum [ Bi - (A0i X0+A1i X1+  ... +  ANi XN)] ^2  (sum for i=1,2,...M)  ` is lowest, it can be said the initial linear system is solved with LEAST SQUARES.  ` The regular matrix is a 2Darray in 4D, an ARRAY REAL (A;M;N)  ` A is a matrix with M rows and N+1 columns  ` The second member is an usual array : B  `                  |   B1  |  `                  |   B2  |  `     B=         |   B3  |  `                  |   ....                                                  `                  |   BM |  ` B is a matrix with M rows and 1 column.  ` If X is an N+1 sized array :  `                  |   X0  |  `                  |   X1  |  `     X=         |   ....   `                  |   XN |                                                ` the solution is to solve the system of N+1 equations with N+1 unknowns with  ` àAX = àB  ` where à is the transpose matrix of A.  ` You get à by exchanging rows with columns.  ` ---------------------------------------------  ` MATHERROR:= MATH_SyslinSurDim(->A;-> B;-> X;N; M; EPSILON)  ` A is the regular matrix, a 2Darray  ` B and X are 1Darray  ` and the end, X contains the solution  ` M is the quantity of equations  ` N+1 is the quantity of unknowns  ` EPSILON numeric   ` ---------------------------------------------  ` MATHERROR (returned by the method)  `   0 -> the method has been executed  ` +1 -> the method is aborted :  ` if the sum of element's squares in a row of A is lower than EPSILON  ` ------------------------------------------------------  ` (translation : AG - 02/2007)End if C_LONGINT(MATHERROR)C_POINTER($1;$2;$3)C_INTEGER($4;$5;$0)C_REAL($6)  `variables localesC_INTEGER($M;$N;$J;$J1;$K;$K1;$KP1;$L)C_REAL($AKJ;$AKK;$BETA;$BK;$S1;$S2;$EPSILON)  `Passage des paramètres$M:=$4  ` $4 équations numérotées de 1 à $M$N:=$5-1  ` $5  inconnues numérotées de 0 à $N-1$EPSILON:=$6  `tableaux locauxARRAY REAL($A;$N;$M)  `on utilisera $A{0}ARRAY REAL($B;$M)ARRAY REAL($X;$N)  `on utilisera $X{0}  `passage des tableaux  `$1 est le tableau des coefficients du système à résoudreFor ($I;0;$N)For ($J;1;$M)$A{$I}{$J}:=$1->{$J}{$I+1}  `noter que le tableau local $A est le transposé du tableau passé dans $1End for End for For ($I;1;$M)$B{$I}:=$2->{$I}End for $0:=0  `à priori tout se passera bienFor ($K;0;$N)$KP1:=$K+1$AKK:=$A{$K}{$KP1}$K1:=$KP1+1$S1:=$AKK*$AKKFor ($L;$K1;$M)$S1:=$S1+($A{$K}{$L}*$A{$K}{$L})End for If ($S1<$EPSILON)$0:=-1End if If ($0=0)  ` on peut continuer$S1:=Square root($S1)If ($AKK<0,0001)$S1:=-$S1End if $BETA:=1/($S1*($S1+$AKK))$A{$K}{$KP1}:=-$S1For ($J;$KP1;$N)$AKJ:=$A{$J}{$KP1}$S2:=0For ($L;$K1;$M)$S2:=$S2+($A{$K}{$L}*$A{$J}{$L})End for $A{$J}{$KP1}:=-($AKK*$AKJ+$S2)/$S1For ($L;$K1;$M)$A{$J}{$L}:=$A{$J}{$L}-($A{$K}{$L}*($AKJ/$S1+($BETA*$S2)))End for End for $S2:=0For ($L;$K1;$M)$S2:=$S2+($A{$K}{$L}*$B{$L})End for $BK:=$B{$KP1}$B{$KP1}:=-($AKK*$BK+$S2)/$S1For ($L;$K1;$M)$B{$L}:=$B{$L}-($A{$K}{$L}*($BK/$S1+($BETA*$S2)))End for End if End for If ($0=0)  `la méthode n'est pas avortée.  `Résolution système triangulaire$X{$N}:=$B{$N+1}/$A{$N}{$N+1}For ($K;1;$N)$K1:=$N-$K$J1:=$K1+1$S1:=0For ($J;$J1;$N)$S1:=$S1+($A{$J}{$J1}*$X{$J})End for $X{$K1}:=($B{$J1}-$S1)/$A{$K1}{$J1}End for   `restitution de la solution dans $3$N:=$N+1For ($I;1;$N)$3->{$I}:=$X{$I-1}End for   `Calcul de la somme des carrés des écarts restituée dans $3->{0}$S:=0For ($i;1;$M)$Ecart:=0For ($j;1;$N)$Ecart:=$Ecart+($1->{$i}{$j}*$3->{$j})$S1:=$S1+($Ecart*$Ecart)End for $Ecart:=$Ecart-$2->{$i}$Ecart:=$Ecart*$Ecart$S:=$S+$EcartEnd for $3->{0}:=$SEnd if MATHERROR:=$0