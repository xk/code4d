If (False)  // MATH_LoiFisher [ Teddy LINET 02/03 et Philip BURNS 1985]  // ------------------------------------------------------  // ---------------   F R A N C A I S  ---------------  // ------------------------------------------------------  //ATTENTION : nécessite MATH_LoiBetaCumul  //-------------------------------------------------  // RAPPELS MATHEMATIQUES :  // Evalue la probabilité selon la loi de Fischer  //   // Soient deux variables aléatoires indépendantes : X = Khi(m)^2 et et   // Y = Khi(n)^2. La variable Z=(X/m)/(Y/n)=(n/m)*(X/Y) est dite variable de   // Fisher-Snedecor à m et n degrés de liberté. On note :   //                  Khi2(m)    Khi2(n)       n     Khi2(m)  // Z:=F(m,n)=------- / ------- = --- * -------  //                     m              n            m     Khi2(n)  // La distribution de Fisher sert pour le test statistique du même nom  // Dans la table, m est appelé dénominateur et n numérateur  //-------------------------------------------------  // MATH_LoiFisher ($vF_F;$vDDLNumerateur_F;$vDDLDenominateur_F)-->Réel  // $vF_F (Reel) valeur de F  // $vDDLNumerateur_F (Reel)  Degrés de liberté du numérateur  // $vDDLDenominateur_F (Reel) Degrés de liberté du dénominateur  // Du fait de l'utilisation de la fonction beta on peu utiliser des   // degrés de libertés non entier (pas banal non ?)  // ---------------------------------------------  // MATHERROR: idem renvoyé par la fonction MATH_LoiBetaCumul  //  0 : Pas d'erreur  // -1 : $vX_F<=0  // -2 : $vAlpha_F<=0  // -3 : $vBeta_F <=0   // -4 : $vX_F>1  // -5 : Calculs intermédiaires incompatibles  // +1 -> Ddl non entier (alors qu'il aurait du)  // ------------------------------------------------------  // ---------------   E N G L I S H   -----------------  // ------------------------------------------------------  // WARNING : this method needs MATH_LoiBetaCumul  //-------------------------------------------------  // Math's summary  // Evaluates probability with Fischer distribution  //   // Given two independant random variables  : X = Khi(m)^2 et et   // Y = Khi(n)^2. Variable Z=(X/m)/(Y/n)=(n/m)*(X/Y) is said variable of Fisher-Snedecor with m and n degrees of freedon. We note :   //                  Khi2(m)    Khi2(n)       n     Khi2(m)  // Z:=F(m,n)=------- / ------- = --- * -------  //                     m              n            m     Khi2(n)  // Fisher distribution is used for eponymic statistical test   // In table, m is called denominator and n numerator  //-------------------------------------------------  // MATH_LoiFisher ($vF_F;$vDDLNumerateur_F;$vDDLDenominateur_F)-->Réel  // $vF_F (Real) value of F  // $vDDLNumerateur_F (Real)  Degrees of freedom of numerator  // $vDDLDenominateur_F (Real) Degrees of freedom of denominator  // Since we use Beta function, we can use non-integer degress of freedom (not trivial !)  // ---------------------------------------------  // MATHERROR: idem returned by function MATH_LoiBetaCumul  //   0 -> No error  // -1 : $vX_F<=0  // -2 : $vAlpha_F<=0  // -3 : $vBeta_F <=0   // -4 : $vX_F>1  // -5 : Intermediate calculations incompatibles  // +1 -> Ddl non integer (it would have been)  // ------------------------------------------------------  //  (translation : BE 3-2010)End if   //@SVN_Folder: MATH_/C_REAL($vF_F;$1;$vDfn_F;$2;$Dfd_F;$3)C_REAL($vPval_F;$0)$vF_F:=$1$vDfn_F:=$2$Dfd_F:=$3C_REAL($vX_F;$vAlpha_F;$vBeta_F)  // CONSTANTESC_LONGINT($vDprec_I;$vMaxIter_I)$vDprec_I:=12$vMaxIter_I:=200  //  // VARIABLESC_LONGINT(MATHERROR)$vPval_F:=-1If ($vDfn_F>0)If ($Dfd_F>0)$vX_F:=($vF_F*$vDfn_F)$vX_F:=$Dfd_F+$vX_F$vX_F:=$Dfd_F/$vX_F  // Soit $vX_F:=$Dfd_F/($Dfd_F+($vF_F*$vDfn_F))$vAlpha_F:=$Dfd_F/2$vBeta_F:=$vDfn_F/2$vPval_F:=MATH_LoiBetaCumul ($vX_F;$vAlpha_F;$vBeta_F;$vDprec_I;$vMaxIter_I)Case of : (MATHERROR<0)$vPval_F:=-1: (((Int($vDfn_F)-$vDfn_F)#0) | ((Int($Dfd_F)-$Dfd_F)#0))MATHERROR:=1End case Else MATHERROR:=-3  // Dénominateur <=0End if Else MATHERROR:=-2  // Numerateur <=0End if $0:=$vPval_F