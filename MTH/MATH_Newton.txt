C_TEXT($2)C_TEXT($1)C_REAL($3)C_REAL($5)C_REAL($6)C_LONGINT($4)C_LONGINT($0)C_POINTER($7)$0:=MTH_ANL_Newton ($1;$2;$3;$4;$5;$6;$7)  `Work on International version  `TestéeIf (False)  ` MATH_Newton [Marc Duc-Jacquet 10/2002]  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  `ATTENTION : nécessite MATH_Evaluation  ` ---------------------------------------------   ` Rappels mathématiques : F(x) est dérivable sur (a,b)  ` La méthode itérative de Newton pour trouver un zéro de F(x)   ` consiste à remplacer localement la courbe F par sa tangente  `  on cherche le zéro de cette droite, puis on itère le processus  ` ---------------------------------------------  ` PREMIERE SYNTAXE: sert à calculer F(X) ou F'(X)  ` MATH_Newton (F; FP;X;Sélecteur) --> Numérique  ` F (texte) expression de la fonction F(x)  ` FP (texte) expression de la fonction F'(x)  ` résultat (Réel) : F(X) si Sélecteur=1, FP(X) si Sélecteur=2  ` Sélecteur peut aussi utiliser les constantes Newton_F et Newton_FP  ` ---------------------------------------------  `  DEUXIEME SYNTAXE: méthode proprement dite  ` MATH_Newton(F;FP;X0;NITERMAX;PREC;TOL;PtrTabR) --> Entier  ` F, FP (texte) expressions analytiques des fonction F(x) et F'(X)  ` X0  (réel)  Point de départ de l'itération  ` NITERMAX (entier) : nombre maximum d'itérations   ` PtrTabR (Pointeur) Pointeur sur le tableau TabR  ` résultat:   TabR{1}  = B dernier itéré  TabR{2}  = F(B )  `                  TabR{3} =  A itéré précédent  TabR{4}  = F(A )  `                  TabR{5} nombre d'itérations   ` ---------------------------------------------  ` MATHERROR:  renvoyé par la fonction. Si Xet Y sont les 2 derniers itérés  `               0   exécution normale : abs(B-A)<= PREC*Abs(B) et abs(F(A))<=PREC  `             -1   arrêt de niveau 1:  abs(F(A))<=PREC mais abs(B-A)> PREC*Abs(B)  `             -2   arrêt de niveau 2: nombre max d'itérations atteint  `             -3   arrêt de niveau 3: Abs(F'(A)) < TOL*abs(F(A))  ( pente de la tangente trop faible)  ` ------------------------------------------------------  ` ---------------   E N G L I S H   ----------------  ` ------------------------------------------------------  ` WARNING : this method needs MATH_Evaluation  ` ---------------------------------------------   ` Math's summary : F(x) est dérivable sur (a,b)  ` Newton iterative method pour trouver un zéro de F(x)   ` consiste à remplacer localement la courbe F par sa tangente  `  on cherche le zéro de cette droite, puis on itère le processus  ` ---------------------------------------------  ` FIRST SYNTAX: used to compute F(X) ou F'(X)  ` MATH_Newton (F; FP;X;Selector) --> Real  ` F (text) F(x) function's exepression   ` FP (text)  F'(x) function's exepression   ` résultat (Real) : F(X) if Selector=1, FP(X) if Selector=2  ` Selector may also use constants Newton_F and Newton_FP  ` ---------------------------------------------  `  SECOND SYNTAX : method itself  ` MATH_Newton(F;FP;X0;NITERMAX;PREC;TOL;PtrTabR) --> Integer  ` F, FP (text) analytical expressions of functions F(x) et F'(X)  ` X0  (réel)  Iteration starting point   ` NITERMAX (integer) : iteration maximum number   ` PtrTabR (Pointer) Pointer on array TabR  ` result :   TabR{1}  = B last iteration  TabR{2}  = F(B )  `                  TabR{3} =  A previous iteration TabR{4}  = F(A )  `                  TabR{5} iteration number   ` ---------------------------------------------  ` MATHERROR:  send by function. If  X and Y are last iterations  `               0   standard execution : abs(B-A)<= PREC*Abs(B) et abs(F(A))<=PREC  `             -1   level 1 stop :  abs(F(A))<=PREC mais abs(B-A)> PREC*Abs(B)  `             -2   level 2 stop : iteration maximum number  reached  `             -3   level 3 stop : Abs(F'(A)) < TOL*abs(F(A))    (tangent' slope too weak)  ` ------------------------------------------------------  `  (translation : BE 3-2010)C_LONGINT(MATHERROR)C_TEXT($1;$2)C_REAL($3;$5;$6;$A;$B;$F;$FP;$TOL;$BPrec;$FPrec)C_LONGINT($4;$N;$INDIC;$NITER;$NITERMAX)C_POINTER($7)$N:=Count parameters$PREC:=$5$TOL:=$6$INDIC:=-2$NITER:=0$NITERMAX:=$4$B:=$3  ` point de départ$F:=MATH_Evaluation ($1;$B)  `= F($B)While ($NITER<$NITERMAX) & ($INDIC=-2)$FP:=MATH_Evaluation ($2;$B)  `= F'($B)If (Abs($FP)<($TOL*$F))$INDIC:=-3Else   `sauvegarde avant itération$BPrec:=$B$FPrec:=$F  `calcul itéré suivant$NITER:=$NITER+1$A:=$B-($F/$FP)$F:=MATH_Evaluation ($1;$A)  `=F($A)  `TESTS de sortieIf (Abs($F)<=$PREC)If (Abs($B-$A)<=($PREC*Abs($F)))$INDIC:=0Else $INDIC:=-1End if End if $B:=$AEnd if End while   `Récupération résultats$0:=$INDIC$7->{1}:=$B$7->{2}:=$FIf ($NITER>=1)  `on a fait au moins 1 itération  `avant dernier itéré$7->{3}:=$BPrec$7->{4}:=$FPrecEnd if $7->{5}:=$NITERMATHERROR:=$0End if 