C_REAL($1;$2;$0)$0:=MTH_STA_StudentDistribution ($1;$2)If (False)  ` MATH_LoiStudent [ Teddy LINET 02/03 et Philip BURNS 1985]  ` ------------------------------------------------------  ` ---------------   F R A N C A I S  ---------------  ` ------------------------------------------------------  `ATTENTION : nécessite MATH_LoiBetaCumul  `-------------------------------------------------  ` RAPPELS MATHEMATIQUES :  ` Evalue la probabilité selon la loi de Student  `  ` Si U et V sont deux variables aléatoires indépendantes et de loi  ` respective Khi2(n) et N(O,1) alors on dit que la variable aléatoire  ` T(n) = V/racine carree(U/n)  ` Suit une loi de student de parametre n    `  ` La distribution de Student sert pour le test statistique du même nom  `-------------------------------------------------  ` MATH_LoiStudent ($vT_F;$vDDL_F)-->Réel  ` $vT_F (Reel) valeur de T  ` $vDDL_F (Reel)  Degrés de liberté  ` Du fait de l'utilisation de la fonction beta on peu utiliser des   ` degrés de libertés non entier (pas banal non ?)  ` ---------------------------------------------  ` MATHERROR: idem renvoyé par la fonction MATH_LoiBetaCumul  `  0 : Pas d'erreur  ` -1 : $vX_F<=0  ` -2 : $vAlpha_F<=0  ` -3 : $vBeta_F <=0   ` -4 : $vX_F>1  ` -5 : Calculs intermédiaires incompatibles  ` +1 -> Ddl non entier (alors qu'il aurait du)  ` ------------------------------------------------------  ` ---------------   E N G L I S H   -----------------  ` ------------------------------------------------------  `WARNING : needs MATH_LoiBetaCumul  `-------------------------------------------------  `Math's summary  ` This method evalutes probability according to Student law  `  ` If U and V are two random independant  variables aléatoires and wth  ` respective laws Khi2(n) et N(O,1) then we say that random variable    ` T(n) = V/square root(U/n)  ` follows a student law with parameter n    `  `  Student distribution is used for eponymic statistical test statistique    `-------------------------------------------------  ` MATH_LoiStudent ($vT_F;$vDDL_F)-->Réel  ` $vT_F (Reel) Value of T  ` $vDDL_F (Reel)  Degrees of freedom  ` Since we use Beta function, we can use non-integer degress of freedom (not trivial !)  ` ---------------------------------------------  ` MATHERROR: idem returned by function MATH_LoiBetaCumul  `   0 : No error  ` -1 : $vX_F<=0  ` -2 : $vAlpha_F<=0  ` -3 : $vBeta_F <=0   ` -4 : $vX_F>1  ` -5 : Intermediate calculations incompatibles  ` +1 -> Ddl non entier (alors qu'il aurait du)  ` ------------------------------------------------------  `  (translation : BE 03-2010)  `End if C_REAL($vT_F;$1;$vDDL_F;$2;$vPval_F;$0)$vT_F:=$1$vDDL_F:=$2  ` CONSTANTESC_INTEGER($vDprec_I;$vMaxIter_I)C_LONGINT(MATHERROR)$vDprec_I:=12$vMaxIter_I:=200$vPval_F:=-1If ($vDDL_F>0)$vX_F:=$vT_F*$vT_F$vX_F:=$vDDL_F+$vX_F$vX_F:=$vDDL_F/$vX_F  ` Soit $vX_F:=$vDDL_F/($vDDL_F+($vT_F*$vT_F))$vAlpha_F:=$vDDL_F/2$vBeta_F:=0,5$vPval_F:=MATH_LoiBetaCumul ($vX_F;$vAlpha_F;$vBeta_F;$vDprec_I;$vMaxIter_I)Case of : (MATHERROR<0)$vPval_F:=-1: ((Int($vDDL_F)-$vDDL_F)#0)MATHERROR:=1End case Else MATHERROR:=-2End if $0:=$vPval_FEnd if 